// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace biotech {
namespace osla {

void protobuf_ShutdownFile_message_2eproto() {
  delete TinsQuaList::default_instance_;
  delete TinsQuaConfig::default_instance_;
  delete Heartbeat::default_instance_;
  delete InitPhase::default_instance_;
  delete Command::default_instance_;
  delete Instrument::default_instance_;
  delete InstrumentList::default_instance_;
  delete InstrumentBinding::default_instance_;
  delete InstrumentDetail::default_instance_;
  delete Reservation::default_instance_;
  delete ReservationList::default_instance_;
  delete User::default_instance_;
  delete UserList::default_instance_;
  delete Account::default_instance_;
  delete AccountList::default_instance_;
  delete UserRight::default_instance_;
  delete UserRightList::default_instance_;
  delete TempCardBinding::default_instance_;
  delete TempCardBindingList::default_instance_;
  delete Booking::default_instance_;
  delete BookingList::default_instance_;
  delete Calendar::default_instance_;
  delete CalendarList::default_instance_;
  delete GlobalConfig::default_instance_;
  delete Session::default_instance_;
  delete SessionList::default_instance_;
  delete UserInTraining::default_instance_;
  delete UserInTrainingList::default_instance_;
  delete UserEvent::default_instance_;
  delete UserEventList::default_instance_;
  delete SystemEvent::default_instance_;
  delete SystemEventList::default_instance_;
  delete FtpFileUpload::default_instance_;
  delete FtpEvent::default_instance_;
  delete FtpEventList::default_instance_;
  delete DeviceCaptureEvent::default_instance_;
  delete DeviceCaptureEventList::default_instance_;
  delete SessionOpertaionReq::default_instance_;
  delete SessionOpertaionRep::default_instance_;
  delete Entrust::default_instance_;
  delete EntrustList::default_instance_;
  delete EntrustEvent::default_instance_;
  delete EntrustEventList::default_instance_;
  delete UpgradeParams::default_instance_;
  delete UpgradePlan::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_message_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  TinsQuaList::default_instance_ = new TinsQuaList();
  TinsQuaConfig::default_instance_ = new TinsQuaConfig();
  Heartbeat::default_instance_ = new Heartbeat();
  InitPhase::default_instance_ = new InitPhase();
  Command::default_instance_ = new Command();
  Instrument::default_instance_ = new Instrument();
  InstrumentList::default_instance_ = new InstrumentList();
  InstrumentBinding::default_instance_ = new InstrumentBinding();
  InstrumentDetail::default_instance_ = new InstrumentDetail();
  Reservation::default_instance_ = new Reservation();
  ReservationList::default_instance_ = new ReservationList();
  User::default_instance_ = new User();
  UserList::default_instance_ = new UserList();
  Account::default_instance_ = new Account();
  AccountList::default_instance_ = new AccountList();
  UserRight::default_instance_ = new UserRight();
  UserRightList::default_instance_ = new UserRightList();
  TempCardBinding::default_instance_ = new TempCardBinding();
  TempCardBindingList::default_instance_ = new TempCardBindingList();
  Booking::default_instance_ = new Booking();
  BookingList::default_instance_ = new BookingList();
  Calendar::default_instance_ = new Calendar();
  CalendarList::default_instance_ = new CalendarList();
  GlobalConfig::default_instance_ = new GlobalConfig();
  Session::default_instance_ = new Session();
  SessionList::default_instance_ = new SessionList();
  UserInTraining::default_instance_ = new UserInTraining();
  UserInTrainingList::default_instance_ = new UserInTrainingList();
  UserEvent::default_instance_ = new UserEvent();
  UserEventList::default_instance_ = new UserEventList();
  SystemEvent::default_instance_ = new SystemEvent();
  SystemEventList::default_instance_ = new SystemEventList();
  FtpFileUpload::default_instance_ = new FtpFileUpload();
  FtpEvent::default_instance_ = new FtpEvent();
  FtpEventList::default_instance_ = new FtpEventList();
  DeviceCaptureEvent::default_instance_ = new DeviceCaptureEvent();
  DeviceCaptureEventList::default_instance_ = new DeviceCaptureEventList();
  SessionOpertaionReq::default_instance_ = new SessionOpertaionReq();
  SessionOpertaionRep::default_instance_ = new SessionOpertaionRep();
  Entrust::default_instance_ = new Entrust();
  EntrustList::default_instance_ = new EntrustList();
  EntrustEvent::default_instance_ = new EntrustEvent();
  EntrustEventList::default_instance_ = new EntrustEventList();
  UpgradeParams::default_instance_ = new UpgradeParams();
  UpgradePlan::default_instance_ = new UpgradePlan();
  TinsQuaList::default_instance_->InitAsDefaultInstance();
  TinsQuaConfig::default_instance_->InitAsDefaultInstance();
  Heartbeat::default_instance_->InitAsDefaultInstance();
  InitPhase::default_instance_->InitAsDefaultInstance();
  Command::default_instance_->InitAsDefaultInstance();
  Instrument::default_instance_->InitAsDefaultInstance();
  InstrumentList::default_instance_->InitAsDefaultInstance();
  InstrumentBinding::default_instance_->InitAsDefaultInstance();
  InstrumentDetail::default_instance_->InitAsDefaultInstance();
  Reservation::default_instance_->InitAsDefaultInstance();
  ReservationList::default_instance_->InitAsDefaultInstance();
  User::default_instance_->InitAsDefaultInstance();
  UserList::default_instance_->InitAsDefaultInstance();
  Account::default_instance_->InitAsDefaultInstance();
  AccountList::default_instance_->InitAsDefaultInstance();
  UserRight::default_instance_->InitAsDefaultInstance();
  UserRightList::default_instance_->InitAsDefaultInstance();
  TempCardBinding::default_instance_->InitAsDefaultInstance();
  TempCardBindingList::default_instance_->InitAsDefaultInstance();
  Booking::default_instance_->InitAsDefaultInstance();
  BookingList::default_instance_->InitAsDefaultInstance();
  Calendar::default_instance_->InitAsDefaultInstance();
  CalendarList::default_instance_->InitAsDefaultInstance();
  GlobalConfig::default_instance_->InitAsDefaultInstance();
  Session::default_instance_->InitAsDefaultInstance();
  SessionList::default_instance_->InitAsDefaultInstance();
  UserInTraining::default_instance_->InitAsDefaultInstance();
  UserInTrainingList::default_instance_->InitAsDefaultInstance();
  UserEvent::default_instance_->InitAsDefaultInstance();
  UserEventList::default_instance_->InitAsDefaultInstance();
  SystemEvent::default_instance_->InitAsDefaultInstance();
  SystemEventList::default_instance_->InitAsDefaultInstance();
  FtpFileUpload::default_instance_->InitAsDefaultInstance();
  FtpEvent::default_instance_->InitAsDefaultInstance();
  FtpEventList::default_instance_->InitAsDefaultInstance();
  DeviceCaptureEvent::default_instance_->InitAsDefaultInstance();
  DeviceCaptureEventList::default_instance_->InitAsDefaultInstance();
  SessionOpertaionReq::default_instance_->InitAsDefaultInstance();
  SessionOpertaionRep::default_instance_->InitAsDefaultInstance();
  Entrust::default_instance_->InitAsDefaultInstance();
  EntrustList::default_instance_->InitAsDefaultInstance();
  EntrustEvent::default_instance_->InitAsDefaultInstance();
  EntrustEventList::default_instance_->InitAsDefaultInstance();
  UpgradeParams::default_instance_->InitAsDefaultInstance();
  UpgradePlan::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_message_2eproto_once_);
void protobuf_AddDesc_message_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_message_2eproto_once_,
                 &protobuf_AddDesc_message_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;
#endif
bool MessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
      return true;
    default:
      return false;
  }
}

bool FTP_FILE_UPLOAD_STATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TinsQuaList::kTinsQuasFieldNumber;
#endif  // !_MSC_VER

TinsQuaList::TinsQuaList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TinsQuaList::InitAsDefaultInstance() {
}

TinsQuaList::TinsQuaList(const TinsQuaList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TinsQuaList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TinsQuaList::~TinsQuaList() {
  SharedDtor();
}

void TinsQuaList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TinsQuaList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TinsQuaList& TinsQuaList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

TinsQuaList* TinsQuaList::default_instance_ = NULL;

TinsQuaList* TinsQuaList::New() const {
  return new TinsQuaList;
}

void TinsQuaList::Clear() {
  tinsquas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TinsQuaList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .biotech.osla.TinsQuaConfig tinsQuas = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tinsQuas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tinsquas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tinsQuas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TinsQuaList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .biotech.osla.TinsQuaConfig tinsQuas = 1;
  for (int i = 0; i < this->tinsquas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->tinsquas(i), output);
  }

}

int TinsQuaList::ByteSize() const {
  int total_size = 0;

  // repeated .biotech.osla.TinsQuaConfig tinsQuas = 1;
  total_size += 1 * this->tinsquas_size();
  for (int i = 0; i < this->tinsquas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tinsquas(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TinsQuaList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TinsQuaList*>(&from));
}

void TinsQuaList::MergeFrom(const TinsQuaList& from) {
  GOOGLE_CHECK_NE(&from, this);
  tinsquas_.MergeFrom(from.tinsquas_);
}

void TinsQuaList::CopyFrom(const TinsQuaList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TinsQuaList::IsInitialized() const {

  for (int i = 0; i < tinsquas_size(); i++) {
    if (!this->tinsquas(i).IsInitialized()) return false;
  }
  return true;
}

void TinsQuaList::Swap(TinsQuaList* other) {
  if (other != this) {
    tinsquas_.Swap(&other->tinsquas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TinsQuaList::GetTypeName() const {
  return "biotech.osla.TinsQuaList";
}


// ===================================================================

#ifndef _MSC_VER
const int TinsQuaConfig::kIdFieldNumber;
const int TinsQuaConfig::kTypeFieldNumber;
const int TinsQuaConfig::kOrgNumFieldNumber;
const int TinsQuaConfig::kInstrumentIdFieldNumber;
const int TinsQuaConfig::kQuaIdFieldNumber;
const int TinsQuaConfig::kWorkTimeFieldNumber;
const int TinsQuaConfig::kStatusFieldNumber;
#endif  // !_MSC_VER

TinsQuaConfig::TinsQuaConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TinsQuaConfig::InitAsDefaultInstance() {
}

TinsQuaConfig::TinsQuaConfig(const TinsQuaConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TinsQuaConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = false;
  orgnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instrumentid_ = 0;
  quaid_ = 0;
  worktime_ = false;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TinsQuaConfig::~TinsQuaConfig() {
  SharedDtor();
}

void TinsQuaConfig::SharedDtor() {
  if (orgnum_ != &::google::protobuf::internal::kEmptyString) {
    delete orgnum_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TinsQuaConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TinsQuaConfig& TinsQuaConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

TinsQuaConfig* TinsQuaConfig::default_instance_ = NULL;

TinsQuaConfig* TinsQuaConfig::New() const {
  return new TinsQuaConfig;
}

void TinsQuaConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = false;
    if (has_orgnum()) {
      if (orgnum_ != &::google::protobuf::internal::kEmptyString) {
        orgnum_->clear();
      }
    }
    instrumentid_ = 0;
    quaid_ = 0;
    worktime_ = false;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TinsQuaConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required bool type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_orgNum;
        break;
      }

      // optional string orgNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orgNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orgnum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_instrumentId;
        break;
      }

      // required int32 instrumentId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instrumentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instrumentid_)));
          set_has_instrumentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_quaId;
        break;
      }

      // required int32 quaId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quaId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quaid_)));
          set_has_quaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_workTime;
        break;
      }

      // required bool workTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_workTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &worktime_)));
          set_has_worktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // required int32 status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TinsQuaConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bool type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->type(), output);
  }

  // optional string orgNum = 3;
  if (has_orgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->orgnum(), output);
  }

  // required int32 instrumentId = 4;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->instrumentid(), output);
  }

  // required int32 quaId = 5;
  if (has_quaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->quaid(), output);
  }

  // required bool workTime = 6;
  if (has_worktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->worktime(), output);
  }

  // required int32 status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->status(), output);
  }

}

int TinsQuaConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required bool type = 2;
    if (has_type()) {
      total_size += 1 + 1;
    }

    // optional string orgNum = 3;
    if (has_orgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orgnum());
    }

    // required int32 instrumentId = 4;
    if (has_instrumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instrumentid());
    }

    // required int32 quaId = 5;
    if (has_quaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quaid());
    }

    // required bool workTime = 6;
    if (has_worktime()) {
      total_size += 1 + 1;
    }

    // required int32 status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TinsQuaConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TinsQuaConfig*>(&from));
}

void TinsQuaConfig::MergeFrom(const TinsQuaConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_orgnum()) {
      set_orgnum(from.orgnum());
    }
    if (from.has_instrumentid()) {
      set_instrumentid(from.instrumentid());
    }
    if (from.has_quaid()) {
      set_quaid(from.quaid());
    }
    if (from.has_worktime()) {
      set_worktime(from.worktime());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void TinsQuaConfig::CopyFrom(const TinsQuaConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TinsQuaConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007b) != 0x0000007b) return false;

  return true;
}

void TinsQuaConfig::Swap(TinsQuaConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(orgnum_, other->orgnum_);
    std::swap(instrumentid_, other->instrumentid_);
    std::swap(quaid_, other->quaid_);
    std::swap(worktime_, other->worktime_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TinsQuaConfig::GetTypeName() const {
  return "biotech.osla.TinsQuaConfig";
}


// ===================================================================

#ifndef _MSC_VER
const int Heartbeat::kClientTimestampFieldNumber;
const int Heartbeat::kServerTimestampFieldNumber;
const int Heartbeat::kInstrumentIdFieldNumber;
const int Heartbeat::kClientStateFieldNumber;
const int Heartbeat::kOrgCodeFieldNumber;
#endif  // !_MSC_VER

Heartbeat::Heartbeat()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Heartbeat::InitAsDefaultInstance() {
}

Heartbeat::Heartbeat(const Heartbeat& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Heartbeat::SharedCtor() {
  _cached_size_ = 0;
  client_timestamp_ = 0;
  server_timestamp_ = 0;
  instrument_id_ = 0;
  client_state_ = 0;
  org_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Heartbeat::~Heartbeat() {
  SharedDtor();
}

void Heartbeat::SharedDtor() {
  if (org_code_ != &::google::protobuf::internal::kEmptyString) {
    delete org_code_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Heartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Heartbeat& Heartbeat::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

Heartbeat* Heartbeat::default_instance_ = NULL;

Heartbeat* Heartbeat::New() const {
  return new Heartbeat;
}

void Heartbeat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_timestamp_ = 0;
    server_timestamp_ = 0;
    instrument_id_ = 0;
    client_state_ = 0;
    if (has_org_code()) {
      if (org_code_ != &::google::protobuf::internal::kEmptyString) {
        org_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Heartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_timestamp_)));
          set_has_client_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_timestamp;
        break;
      }

      // required int32 server_timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_timestamp_)));
          set_has_server_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_instrument_id;
        break;
      }

      // optional int32 instrument_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instrument_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instrument_id_)));
          set_has_instrument_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_client_state;
        break;
      }

      // optional int32 client_state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_state_)));
          set_has_client_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_org_code;
        break;
      }

      // optional string org_code = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_org_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_org_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Heartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_timestamp = 1;
  if (has_client_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_timestamp(), output);
  }

  // required int32 server_timestamp = 2;
  if (has_server_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->server_timestamp(), output);
  }

  // optional int32 instrument_id = 3;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->instrument_id(), output);
  }

  // optional int32 client_state = 4;
  if (has_client_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->client_state(), output);
  }

  // optional string org_code = 5;
  if (has_org_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->org_code(), output);
  }

}

int Heartbeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_timestamp = 1;
    if (has_client_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_timestamp());
    }

    // required int32 server_timestamp = 2;
    if (has_server_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_timestamp());
    }

    // optional int32 instrument_id = 3;
    if (has_instrument_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instrument_id());
    }

    // optional int32 client_state = 4;
    if (has_client_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_state());
    }

    // optional string org_code = 5;
    if (has_org_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->org_code());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Heartbeat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Heartbeat*>(&from));
}

void Heartbeat::MergeFrom(const Heartbeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_timestamp()) {
      set_client_timestamp(from.client_timestamp());
    }
    if (from.has_server_timestamp()) {
      set_server_timestamp(from.server_timestamp());
    }
    if (from.has_instrument_id()) {
      set_instrument_id(from.instrument_id());
    }
    if (from.has_client_state()) {
      set_client_state(from.client_state());
    }
    if (from.has_org_code()) {
      set_org_code(from.org_code());
    }
  }
}

void Heartbeat::CopyFrom(const Heartbeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heartbeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Heartbeat::Swap(Heartbeat* other) {
  if (other != this) {
    std::swap(client_timestamp_, other->client_timestamp_);
    std::swap(server_timestamp_, other->server_timestamp_);
    std::swap(instrument_id_, other->instrument_id_);
    std::swap(client_state_, other->client_state_);
    std::swap(org_code_, other->org_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Heartbeat::GetTypeName() const {
  return "biotech.osla.Heartbeat";
}


// ===================================================================

bool InitPhase_Option_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const InitPhase_Option InitPhase::CLIENT_INIT_REQ;
const InitPhase_Option InitPhase::SERVER_DEVICE_INIT_DONE;
const InitPhase_Option InitPhase::SERVER_INIT_DONE;
const InitPhase_Option InitPhase::Option_MIN;
const InitPhase_Option InitPhase::Option_MAX;
const int InitPhase::Option_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int InitPhase::kOptionFieldNumber;
const int InitPhase::kBindCodeFieldNumber;
#endif  // !_MSC_VER

InitPhase::InitPhase()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void InitPhase::InitAsDefaultInstance() {
}

InitPhase::InitPhase(const InitPhase& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void InitPhase::SharedCtor() {
  _cached_size_ = 0;
  option_ = 1;
  bind_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitPhase::~InitPhase() {
  SharedDtor();
}

void InitPhase::SharedDtor() {
  if (bind_code_ != &::google::protobuf::internal::kEmptyString) {
    delete bind_code_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InitPhase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InitPhase& InitPhase::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

InitPhase* InitPhase::default_instance_ = NULL;

InitPhase* InitPhase::New() const {
  return new InitPhase;
}

void InitPhase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    option_ = 1;
    if (has_bind_code()) {
      if (bind_code_ != &::google::protobuf::internal::kEmptyString) {
        bind_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool InitPhase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .biotech.osla.InitPhase.Option option = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::biotech::osla::InitPhase_Option_IsValid(value)) {
            set_option(static_cast< ::biotech::osla::InitPhase_Option >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bind_code;
        break;
      }

      // optional string bind_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bind_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bind_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitPhase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .biotech.osla.InitPhase.Option option = 1;
  if (has_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->option(), output);
  }

  // optional string bind_code = 2;
  if (has_bind_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bind_code(), output);
  }

}

int InitPhase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .biotech.osla.InitPhase.Option option = 1;
    if (has_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->option());
    }

    // optional string bind_code = 2;
    if (has_bind_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bind_code());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitPhase::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InitPhase*>(&from));
}

void InitPhase::MergeFrom(const InitPhase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_option()) {
      set_option(from.option());
    }
    if (from.has_bind_code()) {
      set_bind_code(from.bind_code());
    }
  }
}

void InitPhase::CopyFrom(const InitPhase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitPhase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InitPhase::Swap(InitPhase* other) {
  if (other != this) {
    std::swap(option_, other->option_);
    std::swap(bind_code_, other->bind_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InitPhase::GetTypeName() const {
  return "biotech.osla.InitPhase";
}


// ===================================================================

bool Command_Option_IsValid(int value) {
  switch(value) {
    case 11:
    case 12:
    case 13:
    case 14:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Command_Option Command::CLIENT_RECV_OK;
const Command_Option Command::CLIENT_RECV_ERR;
const Command_Option Command::CLIENT_PARSE_ERR;
const Command_Option Command::CLIENT_PARSE_OK;
const Command_Option Command::SERVER_RECV_OK;
const Command_Option Command::SERVER_RECV_ERR;
const Command_Option Command::SERVER_PARSE_OK;
const Command_Option Command::SERVER_PARSE_ERR;
const Command_Option Command::Option_MIN;
const Command_Option Command::Option_MAX;
const int Command::Option_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Command::kOptionFieldNumber;
#endif  // !_MSC_VER

Command::Command()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Command::InitAsDefaultInstance() {
}

Command::Command(const Command& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Command::SharedCtor() {
  _cached_size_ = 0;
  option_ = 11;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Command::~Command() {
  SharedDtor();
}

void Command::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Command& Command::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New() const {
  return new Command;
}

void Command::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    option_ = 11;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .biotech.osla.Command.Option option = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::biotech::osla::Command_Option_IsValid(value)) {
            set_option(static_cast< ::biotech::osla::Command_Option >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .biotech.osla.Command.Option option = 1;
  if (has_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->option(), output);
  }

}

int Command::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .biotech.osla.Command.Option option = 1;
    if (has_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->option());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Command*>(&from));
}

void Command::MergeFrom(const Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_option()) {
      set_option(from.option());
    }
  }
}

void Command::CopyFrom(const Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Command::Swap(Command* other) {
  if (other != this) {
    std::swap(option_, other->option_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Command::GetTypeName() const {
  return "biotech.osla.Command";
}


// ===================================================================

#ifndef _MSC_VER
const int Instrument::kIdFieldNumber;
const int Instrument::kNameFieldNumber;
const int Instrument::kOrgCodeFieldNumber;
#endif  // !_MSC_VER

Instrument::Instrument()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Instrument::InitAsDefaultInstance() {
}

Instrument::Instrument(const Instrument& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Instrument::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  org_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Instrument::~Instrument() {
  SharedDtor();
}

void Instrument::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (org_code_ != &::google::protobuf::internal::kEmptyString) {
    delete org_code_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Instrument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Instrument& Instrument::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

Instrument* Instrument::default_instance_ = NULL;

Instrument* Instrument::New() const {
  return new Instrument;
}

void Instrument::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_org_code()) {
      if (org_code_ != &::google::protobuf::internal::kEmptyString) {
        org_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Instrument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_org_code;
        break;
      }

      // required string org_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_org_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_org_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Instrument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required string org_code = 3;
  if (has_org_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->org_code(), output);
  }

}

int Instrument::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string org_code = 3;
    if (has_org_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->org_code());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Instrument::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Instrument*>(&from));
}

void Instrument::MergeFrom(const Instrument& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_org_code()) {
      set_org_code(from.org_code());
    }
  }
}

void Instrument::CopyFrom(const Instrument& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instrument::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Instrument::Swap(Instrument* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(org_code_, other->org_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Instrument::GetTypeName() const {
  return "biotech.osla.Instrument";
}


// ===================================================================

#ifndef _MSC_VER
const int InstrumentList::kInstrumentFieldNumber;
#endif  // !_MSC_VER

InstrumentList::InstrumentList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void InstrumentList::InitAsDefaultInstance() {
}

InstrumentList::InstrumentList(const InstrumentList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void InstrumentList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstrumentList::~InstrumentList() {
  SharedDtor();
}

void InstrumentList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InstrumentList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InstrumentList& InstrumentList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

InstrumentList* InstrumentList::default_instance_ = NULL;

InstrumentList* InstrumentList::New() const {
  return new InstrumentList;
}

void InstrumentList::Clear() {
  instrument_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool InstrumentList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .biotech.osla.Instrument instrument = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instrument()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_instrument;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstrumentList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .biotech.osla.Instrument instrument = 1;
  for (int i = 0; i < this->instrument_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->instrument(i), output);
  }

}

int InstrumentList::ByteSize() const {
  int total_size = 0;

  // repeated .biotech.osla.Instrument instrument = 1;
  total_size += 1 * this->instrument_size();
  for (int i = 0; i < this->instrument_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instrument(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstrumentList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InstrumentList*>(&from));
}

void InstrumentList::MergeFrom(const InstrumentList& from) {
  GOOGLE_CHECK_NE(&from, this);
  instrument_.MergeFrom(from.instrument_);
}

void InstrumentList::CopyFrom(const InstrumentList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentList::IsInitialized() const {

  for (int i = 0; i < instrument_size(); i++) {
    if (!this->instrument(i).IsInitialized()) return false;
  }
  return true;
}

void InstrumentList::Swap(InstrumentList* other) {
  if (other != this) {
    instrument_.Swap(&other->instrument_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InstrumentList::GetTypeName() const {
  return "biotech.osla.InstrumentList";
}


// ===================================================================

bool InstrumentBinding_Option_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const InstrumentBinding_Option InstrumentBinding::REQUEST_BINDING;
const InstrumentBinding_Option InstrumentBinding::CONFIRM_BINDING;
const InstrumentBinding_Option InstrumentBinding::RELEASE_BINDING;
const InstrumentBinding_Option InstrumentBinding::Option_MIN;
const InstrumentBinding_Option InstrumentBinding::Option_MAX;
const int InstrumentBinding::Option_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int InstrumentBinding::kInstrumentIdFieldNumber;
const int InstrumentBinding::kClientMacAddrFieldNumber;
const int InstrumentBinding::kClientModelFieldNumber;
const int InstrumentBinding::kClientVersionFieldNumber;
const int InstrumentBinding::kOptionFieldNumber;
const int InstrumentBinding::kBindCodeFieldNumber;
#endif  // !_MSC_VER

InstrumentBinding::InstrumentBinding()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void InstrumentBinding::InitAsDefaultInstance() {
}

InstrumentBinding::InstrumentBinding(const InstrumentBinding& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void InstrumentBinding::SharedCtor() {
  _cached_size_ = 0;
  instrument_id_ = 0;
  client_mac_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_model_ = 0;
  client_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  option_ = 0;
  bindcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstrumentBinding::~InstrumentBinding() {
  SharedDtor();
}

void InstrumentBinding::SharedDtor() {
  if (client_mac_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete client_mac_addr_;
  }
  if (client_version_ != &::google::protobuf::internal::kEmptyString) {
    delete client_version_;
  }
  if (bindcode_ != &::google::protobuf::internal::kEmptyString) {
    delete bindcode_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InstrumentBinding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InstrumentBinding& InstrumentBinding::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

InstrumentBinding* InstrumentBinding::default_instance_ = NULL;

InstrumentBinding* InstrumentBinding::New() const {
  return new InstrumentBinding;
}

void InstrumentBinding::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instrument_id_ = 0;
    if (has_client_mac_addr()) {
      if (client_mac_addr_ != &::google::protobuf::internal::kEmptyString) {
        client_mac_addr_->clear();
      }
    }
    client_model_ = 0;
    if (has_client_version()) {
      if (client_version_ != &::google::protobuf::internal::kEmptyString) {
        client_version_->clear();
      }
    }
    option_ = 0;
    if (has_bindcode()) {
      if (bindcode_ != &::google::protobuf::internal::kEmptyString) {
        bindcode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool InstrumentBinding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 instrument_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instrument_id_)));
          set_has_instrument_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_client_mac_addr;
        break;
      }

      // required string client_mac_addr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_mac_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_mac_addr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_client_model;
        break;
      }

      // required int32 client_model = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_model:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_model_)));
          set_has_client_model();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_client_version;
        break;
      }

      // required string client_version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_option;
        break;
      }

      // required .biotech.osla.InstrumentBinding.Option option = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_option:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::biotech::osla::InstrumentBinding_Option_IsValid(value)) {
            set_option(static_cast< ::biotech::osla::InstrumentBinding_Option >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bindCode;
        break;
      }

      // optional string bindCode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bindCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bindcode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstrumentBinding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 instrument_id = 1;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instrument_id(), output);
  }

  // required string client_mac_addr = 2;
  if (has_client_mac_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->client_mac_addr(), output);
  }

  // required int32 client_model = 3;
  if (has_client_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->client_model(), output);
  }

  // required string client_version = 4;
  if (has_client_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->client_version(), output);
  }

  // required .biotech.osla.InstrumentBinding.Option option = 5;
  if (has_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->option(), output);
  }

  // optional string bindCode = 6;
  if (has_bindcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->bindcode(), output);
  }

}

int InstrumentBinding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 instrument_id = 1;
    if (has_instrument_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instrument_id());
    }

    // required string client_mac_addr = 2;
    if (has_client_mac_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_mac_addr());
    }

    // required int32 client_model = 3;
    if (has_client_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_model());
    }

    // required string client_version = 4;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_version());
    }

    // required .biotech.osla.InstrumentBinding.Option option = 5;
    if (has_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->option());
    }

    // optional string bindCode = 6;
    if (has_bindcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bindcode());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstrumentBinding::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InstrumentBinding*>(&from));
}

void InstrumentBinding::MergeFrom(const InstrumentBinding& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instrument_id()) {
      set_instrument_id(from.instrument_id());
    }
    if (from.has_client_mac_addr()) {
      set_client_mac_addr(from.client_mac_addr());
    }
    if (from.has_client_model()) {
      set_client_model(from.client_model());
    }
    if (from.has_client_version()) {
      set_client_version(from.client_version());
    }
    if (from.has_option()) {
      set_option(from.option());
    }
    if (from.has_bindcode()) {
      set_bindcode(from.bindcode());
    }
  }
}

void InstrumentBinding::CopyFrom(const InstrumentBinding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentBinding::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void InstrumentBinding::Swap(InstrumentBinding* other) {
  if (other != this) {
    std::swap(instrument_id_, other->instrument_id_);
    std::swap(client_mac_addr_, other->client_mac_addr_);
    std::swap(client_model_, other->client_model_);
    std::swap(client_version_, other->client_version_);
    std::swap(option_, other->option_);
    std::swap(bindcode_, other->bindcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InstrumentBinding::GetTypeName() const {
  return "biotech.osla.InstrumentBinding";
}


// ===================================================================

#ifndef _MSC_VER
const int InstrumentDetail::kIdFieldNumber;
const int InstrumentDetail::kNameFieldNumber;
const int InstrumentDetail::kStatusFieldNumber;
const int InstrumentDetail::kMinIntervalFieldNumber;
const int InstrumentDetail::kBookingHoldingTimeFieldNumber;
const int InstrumentDetail::kAlertTimeFieldNumber;
const int InstrumentDetail::kOffDelayTimeFieldNumber;
const int InstrumentDetail::kMinOffTimeFieldNumber;
const int InstrumentDetail::kAlertCurrentFieldNumber;
const int InstrumentDetail::kClientSoftwareUpdateVersionFieldNumber;
const int InstrumentDetail::kBookingBreakTimeFieldNumber;
const int InstrumentDetail::kLooseModeFieldNumber;
const int InstrumentDetail::kWorkingTimeFieldNumber;
const int InstrumentDetail::kBookingModelIDFieldNumber;
const int InstrumentDetail::kTerImgUrlFieldNumber;
#endif  // !_MSC_VER

InstrumentDetail::InstrumentDetail()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void InstrumentDetail::InitAsDefaultInstance() {
}

InstrumentDetail::InstrumentDetail(const InstrumentDetail& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void InstrumentDetail::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  min_interval_ = 0;
  booking_holding_time_ = 0;
  alert_time_ = 0;
  off_delay_time_ = 0;
  min_off_time_ = 0;
  alert_current_ = 0;
  client_software_update_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  booking_break_time_ = 0;
  loosemode_ = false;
  working_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bookingmodelid_ = 0;
  terimgurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstrumentDetail::~InstrumentDetail() {
  SharedDtor();
}

void InstrumentDetail::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (client_software_update_version_ != &::google::protobuf::internal::kEmptyString) {
    delete client_software_update_version_;
  }
  if (working_time_ != &::google::protobuf::internal::kEmptyString) {
    delete working_time_;
  }
  if (terimgurl_ != &::google::protobuf::internal::kEmptyString) {
    delete terimgurl_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InstrumentDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InstrumentDetail& InstrumentDetail::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

InstrumentDetail* InstrumentDetail::default_instance_ = NULL;

InstrumentDetail* InstrumentDetail::New() const {
  return new InstrumentDetail;
}

void InstrumentDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    status_ = 0;
    min_interval_ = 0;
    booking_holding_time_ = 0;
    alert_time_ = 0;
    off_delay_time_ = 0;
    min_off_time_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    alert_current_ = 0;
    if (has_client_software_update_version()) {
      if (client_software_update_version_ != &::google::protobuf::internal::kEmptyString) {
        client_software_update_version_->clear();
      }
    }
    booking_break_time_ = 0;
    loosemode_ = false;
    if (has_working_time()) {
      if (working_time_ != &::google::protobuf::internal::kEmptyString) {
        working_time_->clear();
      }
    }
    bookingmodelid_ = 0;
    if (has_terimgurl()) {
      if (terimgurl_ != &::google::protobuf::internal::kEmptyString) {
        terimgurl_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool InstrumentDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_min_interval;
        break;
      }

      // required int32 min_interval = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_interval_)));
          set_has_min_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_booking_holding_time;
        break;
      }

      // required int32 booking_holding_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_booking_holding_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &booking_holding_time_)));
          set_has_booking_holding_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_alert_time;
        break;
      }

      // required int32 alert_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alert_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alert_time_)));
          set_has_alert_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_off_delay_time;
        break;
      }

      // optional int32 off_delay_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_off_delay_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &off_delay_time_)));
          set_has_off_delay_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_min_off_time;
        break;
      }

      // optional int32 min_off_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_off_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_off_time_)));
          set_has_min_off_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_alert_current;
        break;
      }

      // optional int32 alert_current = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alert_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alert_current_)));
          set_has_alert_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_client_software_update_version;
        break;
      }

      // optional string client_software_update_version = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_software_update_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_software_update_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_booking_break_time;
        break;
      }

      // optional int32 booking_break_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_booking_break_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &booking_break_time_)));
          set_has_booking_break_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_looseMode;
        break;
      }

      // optional bool looseMode = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_looseMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &loosemode_)));
          set_has_loosemode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_working_time;
        break;
      }

      // optional string working_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_working_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_working_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_bookingModelID;
        break;
      }

      // optional int32 bookingModelID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bookingModelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bookingmodelid_)));
          set_has_bookingmodelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_terImgUrl;
        break;
      }

      // optional string terImgUrl = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_terImgUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_terimgurl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstrumentDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  // required int32 min_interval = 4;
  if (has_min_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->min_interval(), output);
  }

  // required int32 booking_holding_time = 5;
  if (has_booking_holding_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->booking_holding_time(), output);
  }

  // required int32 alert_time = 6;
  if (has_alert_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->alert_time(), output);
  }

  // optional int32 off_delay_time = 7;
  if (has_off_delay_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->off_delay_time(), output);
  }

  // optional int32 min_off_time = 8;
  if (has_min_off_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->min_off_time(), output);
  }

  // optional int32 alert_current = 9;
  if (has_alert_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->alert_current(), output);
  }

  // optional string client_software_update_version = 10;
  if (has_client_software_update_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->client_software_update_version(), output);
  }

  // optional int32 booking_break_time = 11;
  if (has_booking_break_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->booking_break_time(), output);
  }

  // optional bool looseMode = 12;
  if (has_loosemode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->loosemode(), output);
  }

  // optional string working_time = 13;
  if (has_working_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->working_time(), output);
  }

  // optional int32 bookingModelID = 14;
  if (has_bookingmodelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->bookingmodelid(), output);
  }

  // optional string terImgUrl = 15;
  if (has_terimgurl()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->terimgurl(), output);
  }

}

int InstrumentDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required int32 min_interval = 4;
    if (has_min_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_interval());
    }

    // required int32 booking_holding_time = 5;
    if (has_booking_holding_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->booking_holding_time());
    }

    // required int32 alert_time = 6;
    if (has_alert_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alert_time());
    }

    // optional int32 off_delay_time = 7;
    if (has_off_delay_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->off_delay_time());
    }

    // optional int32 min_off_time = 8;
    if (has_min_off_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_off_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 alert_current = 9;
    if (has_alert_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alert_current());
    }

    // optional string client_software_update_version = 10;
    if (has_client_software_update_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_software_update_version());
    }

    // optional int32 booking_break_time = 11;
    if (has_booking_break_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->booking_break_time());
    }

    // optional bool looseMode = 12;
    if (has_loosemode()) {
      total_size += 1 + 1;
    }

    // optional string working_time = 13;
    if (has_working_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->working_time());
    }

    // optional int32 bookingModelID = 14;
    if (has_bookingmodelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bookingmodelid());
    }

    // optional string terImgUrl = 15;
    if (has_terimgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->terimgurl());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstrumentDetail::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InstrumentDetail*>(&from));
}

void InstrumentDetail::MergeFrom(const InstrumentDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_min_interval()) {
      set_min_interval(from.min_interval());
    }
    if (from.has_booking_holding_time()) {
      set_booking_holding_time(from.booking_holding_time());
    }
    if (from.has_alert_time()) {
      set_alert_time(from.alert_time());
    }
    if (from.has_off_delay_time()) {
      set_off_delay_time(from.off_delay_time());
    }
    if (from.has_min_off_time()) {
      set_min_off_time(from.min_off_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_alert_current()) {
      set_alert_current(from.alert_current());
    }
    if (from.has_client_software_update_version()) {
      set_client_software_update_version(from.client_software_update_version());
    }
    if (from.has_booking_break_time()) {
      set_booking_break_time(from.booking_break_time());
    }
    if (from.has_loosemode()) {
      set_loosemode(from.loosemode());
    }
    if (from.has_working_time()) {
      set_working_time(from.working_time());
    }
    if (from.has_bookingmodelid()) {
      set_bookingmodelid(from.bookingmodelid());
    }
    if (from.has_terimgurl()) {
      set_terimgurl(from.terimgurl());
    }
  }
}

void InstrumentDetail::CopyFrom(const InstrumentDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void InstrumentDetail::Swap(InstrumentDetail* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(status_, other->status_);
    std::swap(min_interval_, other->min_interval_);
    std::swap(booking_holding_time_, other->booking_holding_time_);
    std::swap(alert_time_, other->alert_time_);
    std::swap(off_delay_time_, other->off_delay_time_);
    std::swap(min_off_time_, other->min_off_time_);
    std::swap(alert_current_, other->alert_current_);
    std::swap(client_software_update_version_, other->client_software_update_version_);
    std::swap(booking_break_time_, other->booking_break_time_);
    std::swap(loosemode_, other->loosemode_);
    std::swap(working_time_, other->working_time_);
    std::swap(bookingmodelid_, other->bookingmodelid_);
    std::swap(terimgurl_, other->terimgurl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InstrumentDetail::GetTypeName() const {
  return "biotech.osla.InstrumentDetail";
}


// ===================================================================

#ifndef _MSC_VER
const int Reservation::kIdFieldNumber;
const int Reservation::kGroupIdFieldNumber;
const int Reservation::kWeekFieldNumber;
const int Reservation::kStartTimeFieldNumber;
const int Reservation::kEndTimeFieldNumber;
const int Reservation::kActiveTimeFieldNumber;
const int Reservation::kExpireTimeFieldNumber;
const int Reservation::kDeleteTimeFieldNumber;
#endif  // !_MSC_VER

Reservation::Reservation()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Reservation::InitAsDefaultInstance() {
}

Reservation::Reservation(const Reservation& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Reservation::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  group_id_ = 0;
  week_ = 0;
  start_time_ = 0;
  end_time_ = 0;
  active_time_ = 0;
  expire_time_ = 0;
  delete_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reservation::~Reservation() {
  SharedDtor();
}

void Reservation::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Reservation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Reservation& Reservation::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

Reservation* Reservation::default_instance_ = NULL;

Reservation* Reservation::New() const {
  return new Reservation;
}

void Reservation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    group_id_ = 0;
    week_ = 0;
    start_time_ = 0;
    end_time_ = 0;
    active_time_ = 0;
    expire_time_ = 0;
    delete_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Reservation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required int32 group_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_week;
        break;
      }

      // required int32 week = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_start_time;
        break;
      }

      // required int32 start_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_end_time;
        break;
      }

      // required int32 end_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_active_time;
        break;
      }

      // required int32 active_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_time_)));
          set_has_active_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_expire_time;
        break;
      }

      // required int32 expire_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_delete_time;
        break;
      }

      // optional int32 delete_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delete_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delete_time_)));
          set_has_delete_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Reservation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->group_id(), output);
  }

  // required int32 week = 3;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->week(), output);
  }

  // required int32 start_time = 4;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->start_time(), output);
  }

  // required int32 end_time = 5;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->end_time(), output);
  }

  // required int32 active_time = 6;
  if (has_active_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->active_time(), output);
  }

  // required int32 expire_time = 7;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->expire_time(), output);
  }

  // optional int32 delete_time = 8;
  if (has_delete_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->delete_time(), output);
  }

}

int Reservation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_id());
    }

    // required int32 week = 3;
    if (has_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week());
    }

    // required int32 start_time = 4;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_time());
    }

    // required int32 end_time = 5;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_time());
    }

    // required int32 active_time = 6;
    if (has_active_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_time());
    }

    // required int32 expire_time = 7;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expire_time());
    }

    // optional int32 delete_time = 8;
    if (has_delete_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delete_time());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reservation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Reservation*>(&from));
}

void Reservation::MergeFrom(const Reservation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_week()) {
      set_week(from.week());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_active_time()) {
      set_active_time(from.active_time());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
    if (from.has_delete_time()) {
      set_delete_time(from.delete_time());
    }
  }
}

void Reservation::CopyFrom(const Reservation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reservation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void Reservation::Swap(Reservation* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(group_id_, other->group_id_);
    std::swap(week_, other->week_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(active_time_, other->active_time_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(delete_time_, other->delete_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Reservation::GetTypeName() const {
  return "biotech.osla.Reservation";
}


// ===================================================================

#ifndef _MSC_VER
const int ReservationList::kReservationFieldNumber;
#endif  // !_MSC_VER

ReservationList::ReservationList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ReservationList::InitAsDefaultInstance() {
}

ReservationList::ReservationList(const ReservationList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ReservationList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReservationList::~ReservationList() {
  SharedDtor();
}

void ReservationList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ReservationList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReservationList& ReservationList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

ReservationList* ReservationList::default_instance_ = NULL;

ReservationList* ReservationList::New() const {
  return new ReservationList;
}

void ReservationList::Clear() {
  reservation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ReservationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .biotech.osla.Reservation reservation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reservation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reservation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_reservation;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReservationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .biotech.osla.Reservation reservation = 1;
  for (int i = 0; i < this->reservation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->reservation(i), output);
  }

}

int ReservationList::ByteSize() const {
  int total_size = 0;

  // repeated .biotech.osla.Reservation reservation = 1;
  total_size += 1 * this->reservation_size();
  for (int i = 0; i < this->reservation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reservation(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReservationList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReservationList*>(&from));
}

void ReservationList::MergeFrom(const ReservationList& from) {
  GOOGLE_CHECK_NE(&from, this);
  reservation_.MergeFrom(from.reservation_);
}

void ReservationList::CopyFrom(const ReservationList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReservationList::IsInitialized() const {

  for (int i = 0; i < reservation_size(); i++) {
    if (!this->reservation(i).IsInitialized()) return false;
  }
  return true;
}

void ReservationList::Swap(ReservationList* other) {
  if (other != this) {
    reservation_.Swap(&other->reservation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ReservationList::GetTypeName() const {
  return "biotech.osla.ReservationList";
}


// ===================================================================

#ifndef _MSC_VER
const int User::kIdFieldNumber;
const int User::kStatusFieldNumber;
const int User::kFirstNameFieldNumber;
const int User::kLastNameFieldNumber;
const int User::kPhoneFieldNumber;
const int User::kCardSerialFieldNumber;
const int User::kAccountIdFieldNumber;
const int User::kIsblackFieldNumber;
const int User::kPenaltyStopStartFieldNumber;
const int User::kPenaltyStopEndFieldNumber;
#endif  // !_MSC_VER

User::User()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void User::InitAsDefaultInstance() {
}

User::User(const User& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void User::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  status_ = 0;
  first_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  card_serial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_id_ = 0;
  isblack_ = 0;
  penaltystopstart_ = 0;
  penaltystopend_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

User::~User() {
  SharedDtor();
}

void User::SharedDtor() {
  if (first_name_ != &::google::protobuf::internal::kEmptyString) {
    delete first_name_;
  }
  if (last_name_ != &::google::protobuf::internal::kEmptyString) {
    delete last_name_;
  }
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (card_serial_ != &::google::protobuf::internal::kEmptyString) {
    delete card_serial_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const User& User::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

User* User::default_instance_ = NULL;

User* User::New() const {
  return new User;
}

void User::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    status_ = 0;
    if (has_first_name()) {
      if (first_name_ != &::google::protobuf::internal::kEmptyString) {
        first_name_->clear();
      }
    }
    if (has_last_name()) {
      if (last_name_ != &::google::protobuf::internal::kEmptyString) {
        last_name_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    if (has_card_serial()) {
      if (card_serial_ != &::google::protobuf::internal::kEmptyString) {
        card_serial_->clear();
      }
    }
    account_id_ = 0;
    isblack_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    penaltystopstart_ = 0;
    penaltystopend_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_first_name;
        break;
      }

      // required string first_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_first_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_first_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_last_name;
        break;
      }

      // required string last_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_phone;
        break;
      }

      // required string phone = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_card_serial;
        break;
      }

      // optional string card_serial = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_serial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_serial()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_account_id;
        break;
      }

      // optional int32 account_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isblack;
        break;
      }

      // required int32 isblack = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isblack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isblack_)));
          set_has_isblack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_penaltyStopStart;
        break;
      }

      // optional int32 penaltyStopStart = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_penaltyStopStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &penaltystopstart_)));
          set_has_penaltystopstart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_penaltyStopEnd;
        break;
      }

      // optional int32 penaltyStopEnd = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_penaltyStopEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &penaltystopend_)));
          set_has_penaltystopend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // required string first_name = 3;
  if (has_first_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->first_name(), output);
  }

  // required string last_name = 4;
  if (has_last_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->last_name(), output);
  }

  // required string phone = 5;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->phone(), output);
  }

  // optional string card_serial = 6;
  if (has_card_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->card_serial(), output);
  }

  // optional int32 account_id = 7;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->account_id(), output);
  }

  // required int32 isblack = 8;
  if (has_isblack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->isblack(), output);
  }

  // optional int32 penaltyStopStart = 9;
  if (has_penaltystopstart()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->penaltystopstart(), output);
  }

  // optional int32 penaltyStopEnd = 10;
  if (has_penaltystopend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->penaltystopend(), output);
  }

}

int User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required string first_name = 3;
    if (has_first_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->first_name());
    }

    // required string last_name = 4;
    if (has_last_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_name());
    }

    // required string phone = 5;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional string card_serial = 6;
    if (has_card_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_serial());
    }

    // optional int32 account_id = 7;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->account_id());
    }

    // required int32 isblack = 8;
    if (has_isblack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isblack());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 penaltyStopStart = 9;
    if (has_penaltystopstart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->penaltystopstart());
    }

    // optional int32 penaltyStopEnd = 10;
    if (has_penaltystopend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->penaltystopend());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const User*>(&from));
}

void User::MergeFrom(const User& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_first_name()) {
      set_first_name(from.first_name());
    }
    if (from.has_last_name()) {
      set_last_name(from.last_name());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_card_serial()) {
      set_card_serial(from.card_serial());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_isblack()) {
      set_isblack(from.isblack());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_penaltystopstart()) {
      set_penaltystopstart(from.penaltystopstart());
    }
    if (from.has_penaltystopend()) {
      set_penaltystopend(from.penaltystopend());
    }
  }
}

void User::CopyFrom(const User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000009f) != 0x0000009f) return false;

  return true;
}

void User::Swap(User* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(first_name_, other->first_name_);
    std::swap(last_name_, other->last_name_);
    std::swap(phone_, other->phone_);
    std::swap(card_serial_, other->card_serial_);
    std::swap(account_id_, other->account_id_);
    std::swap(isblack_, other->isblack_);
    std::swap(penaltystopstart_, other->penaltystopstart_);
    std::swap(penaltystopend_, other->penaltystopend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string User::GetTypeName() const {
  return "biotech.osla.User";
}


// ===================================================================

#ifndef _MSC_VER
const int UserList::kUserFieldNumber;
#endif  // !_MSC_VER

UserList::UserList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserList::InitAsDefaultInstance() {
}

UserList::UserList(const UserList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserList::~UserList() {
  SharedDtor();
}

void UserList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserList& UserList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

UserList* UserList::default_instance_ = NULL;

UserList* UserList::New() const {
  return new UserList;
}

void UserList::Clear() {
  user_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .biotech.osla.User user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_user;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .biotech.osla.User user = 1;
  for (int i = 0; i < this->user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->user(i), output);
  }

}

int UserList::ByteSize() const {
  int total_size = 0;

  // repeated .biotech.osla.User user = 1;
  total_size += 1 * this->user_size();
  for (int i = 0; i < this->user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserList*>(&from));
}

void UserList::MergeFrom(const UserList& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_.MergeFrom(from.user_);
}

void UserList::CopyFrom(const UserList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserList::IsInitialized() const {

  for (int i = 0; i < user_size(); i++) {
    if (!this->user(i).IsInitialized()) return false;
  }
  return true;
}

void UserList::Swap(UserList* other) {
  if (other != this) {
    user_.Swap(&other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserList::GetTypeName() const {
  return "biotech.osla.UserList";
}


// ===================================================================

#ifndef _MSC_VER
const int Account::kIdFieldNumber;
const int Account::kStatusFieldNumber;
const int Account::kGroupIdFieldNumber;
const int Account::kDepositFieldNumber;
const int Account::kCreditFieldNumber;
const int Account::kCreditTempFieldNumber;
const int Account::kCreditTempExpireTimeFieldNumber;
#endif  // !_MSC_VER

Account::Account()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Account::InitAsDefaultInstance() {
}

Account::Account(const Account& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Account::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  status_ = 0;
  group_id_ = 0;
  deposit_ = 0;
  credit_ = 0;
  credit_temp_ = 0;
  credit_temp_expire_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Account::~Account() {
  SharedDtor();
}

void Account::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Account::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Account& Account::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

Account* Account::default_instance_ = NULL;

Account* Account::New() const {
  return new Account;
}

void Account::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    status_ = 0;
    group_id_ = 0;
    deposit_ = 0;
    credit_ = 0;
    credit_temp_ = 0;
    credit_temp_expire_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Account::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // required int32 group_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_deposit;
        break;
      }

      // required int32 deposit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deposit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deposit_)));
          set_has_deposit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_credit;
        break;
      }

      // required int32 credit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_credit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credit_)));
          set_has_credit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_credit_temp;
        break;
      }

      // required int32 credit_temp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_credit_temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credit_temp_)));
          set_has_credit_temp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_credit_temp_expire_time;
        break;
      }

      // required int32 credit_temp_expire_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_credit_temp_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credit_temp_expire_time_)));
          set_has_credit_temp_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Account::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // required int32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->group_id(), output);
  }

  // required int32 deposit = 4;
  if (has_deposit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->deposit(), output);
  }

  // required int32 credit = 5;
  if (has_credit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->credit(), output);
  }

  // required int32 credit_temp = 6;
  if (has_credit_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->credit_temp(), output);
  }

  // required int32 credit_temp_expire_time = 7;
  if (has_credit_temp_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->credit_temp_expire_time(), output);
  }

}

int Account::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required int32 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_id());
    }

    // required int32 deposit = 4;
    if (has_deposit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deposit());
    }

    // required int32 credit = 5;
    if (has_credit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->credit());
    }

    // required int32 credit_temp = 6;
    if (has_credit_temp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->credit_temp());
    }

    // required int32 credit_temp_expire_time = 7;
    if (has_credit_temp_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->credit_temp_expire_time());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Account::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Account*>(&from));
}

void Account::MergeFrom(const Account& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_deposit()) {
      set_deposit(from.deposit());
    }
    if (from.has_credit()) {
      set_credit(from.credit());
    }
    if (from.has_credit_temp()) {
      set_credit_temp(from.credit_temp());
    }
    if (from.has_credit_temp_expire_time()) {
      set_credit_temp_expire_time(from.credit_temp_expire_time());
    }
  }
}

void Account::CopyFrom(const Account& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void Account::Swap(Account* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(group_id_, other->group_id_);
    std::swap(deposit_, other->deposit_);
    std::swap(credit_, other->credit_);
    std::swap(credit_temp_, other->credit_temp_);
    std::swap(credit_temp_expire_time_, other->credit_temp_expire_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Account::GetTypeName() const {
  return "biotech.osla.Account";
}


// ===================================================================

#ifndef _MSC_VER
const int AccountList::kAccoutFieldNumber;
#endif  // !_MSC_VER

AccountList::AccountList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AccountList::InitAsDefaultInstance() {
}

AccountList::AccountList(const AccountList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AccountList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountList::~AccountList() {
  SharedDtor();
}

void AccountList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AccountList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AccountList& AccountList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

AccountList* AccountList::default_instance_ = NULL;

AccountList* AccountList::New() const {
  return new AccountList;
}

void AccountList::Clear() {
  accout_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AccountList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .biotech.osla.Account accout = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accout()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_accout;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .biotech.osla.Account accout = 1;
  for (int i = 0; i < this->accout_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->accout(i), output);
  }

}

int AccountList::ByteSize() const {
  int total_size = 0;

  // repeated .biotech.osla.Account accout = 1;
  total_size += 1 * this->accout_size();
  for (int i = 0; i < this->accout_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accout(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AccountList*>(&from));
}

void AccountList::MergeFrom(const AccountList& from) {
  GOOGLE_CHECK_NE(&from, this);
  accout_.MergeFrom(from.accout_);
}

void AccountList::CopyFrom(const AccountList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountList::IsInitialized() const {

  for (int i = 0; i < accout_size(); i++) {
    if (!this->accout(i).IsInitialized()) return false;
  }
  return true;
}

void AccountList::Swap(AccountList* other) {
  if (other != this) {
    accout_.Swap(&other->accout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AccountList::GetTypeName() const {
  return "biotech.osla.AccountList";
}


// ===================================================================

#ifndef _MSC_VER
const int UserRight::kUserIdFieldNumber;
const int UserRight::kRightFieldNumber;
const int UserRight::kRightTempFieldNumber;
#endif  // !_MSC_VER

UserRight::UserRight()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserRight::InitAsDefaultInstance() {
}

UserRight::UserRight(const UserRight& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserRight::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  right_ = 0;
  right_temp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserRight::~UserRight() {
  SharedDtor();
}

void UserRight::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserRight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserRight& UserRight::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

UserRight* UserRight::default_instance_ = NULL;

UserRight* UserRight::New() const {
  return new UserRight;
}

void UserRight::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
    right_ = 0;
    right_temp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserRight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_right;
        break;
      }

      // required int32 right = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_right_temp;
        break;
      }

      // required int32 right_temp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_right_temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_temp_)));
          set_has_right_temp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserRight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // required int32 right = 2;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->right(), output);
  }

  // required int32 right_temp = 3;
  if (has_right_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->right_temp(), output);
  }

}

int UserRight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // required int32 right = 2;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->right());
    }

    // required int32 right_temp = 3;
    if (has_right_temp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->right_temp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRight::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserRight*>(&from));
}

void UserRight::MergeFrom(const UserRight& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
    if (from.has_right_temp()) {
      set_right_temp(from.right_temp());
    }
  }
}

void UserRight::CopyFrom(const UserRight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRight::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UserRight::Swap(UserRight* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(right_, other->right_);
    std::swap(right_temp_, other->right_temp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserRight::GetTypeName() const {
  return "biotech.osla.UserRight";
}


// ===================================================================

#ifndef _MSC_VER
const int UserRightList::kUserRightFieldNumber;
#endif  // !_MSC_VER

UserRightList::UserRightList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserRightList::InitAsDefaultInstance() {
}

UserRightList::UserRightList(const UserRightList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserRightList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserRightList::~UserRightList() {
  SharedDtor();
}

void UserRightList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserRightList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserRightList& UserRightList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

UserRightList* UserRightList::default_instance_ = NULL;

UserRightList* UserRightList::New() const {
  return new UserRightList;
}

void UserRightList::Clear() {
  user_right_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserRightList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .biotech.osla.UserRight user_right = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_right()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_user_right;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserRightList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .biotech.osla.UserRight user_right = 1;
  for (int i = 0; i < this->user_right_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->user_right(i), output);
  }

}

int UserRightList::ByteSize() const {
  int total_size = 0;

  // repeated .biotech.osla.UserRight user_right = 1;
  total_size += 1 * this->user_right_size();
  for (int i = 0; i < this->user_right_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_right(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRightList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserRightList*>(&from));
}

void UserRightList::MergeFrom(const UserRightList& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_right_.MergeFrom(from.user_right_);
}

void UserRightList::CopyFrom(const UserRightList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRightList::IsInitialized() const {

  for (int i = 0; i < user_right_size(); i++) {
    if (!this->user_right(i).IsInitialized()) return false;
  }
  return true;
}

void UserRightList::Swap(UserRightList* other) {
  if (other != this) {
    user_right_.Swap(&other->user_right_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserRightList::GetTypeName() const {
  return "biotech.osla.UserRightList";
}


// ===================================================================

#ifndef _MSC_VER
const int TempCardBinding::kCardSerialFieldNumber;
const int TempCardBinding::kUserIdFieldNumber;
const int TempCardBinding::kActiveTimeFieldNumber;
const int TempCardBinding::kExpireTimeFieldNumber;
const int TempCardBinding::kIdFieldNumber;
#endif  // !_MSC_VER

TempCardBinding::TempCardBinding()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TempCardBinding::InitAsDefaultInstance() {
}

TempCardBinding::TempCardBinding(const TempCardBinding& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TempCardBinding::SharedCtor() {
  _cached_size_ = 0;
  card_serial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = 0;
  active_time_ = 0;
  expire_time_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TempCardBinding::~TempCardBinding() {
  SharedDtor();
}

void TempCardBinding::SharedDtor() {
  if (card_serial_ != &::google::protobuf::internal::kEmptyString) {
    delete card_serial_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TempCardBinding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TempCardBinding& TempCardBinding::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

TempCardBinding* TempCardBinding::default_instance_ = NULL;

TempCardBinding* TempCardBinding::New() const {
  return new TempCardBinding;
}

void TempCardBinding::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_card_serial()) {
      if (card_serial_ != &::google::protobuf::internal::kEmptyString) {
        card_serial_->clear();
      }
    }
    user_id_ = 0;
    active_time_ = 0;
    expire_time_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TempCardBinding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string card_serial = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_serial()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_active_time;
        break;
      }

      // required int32 active_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_time_)));
          set_has_active_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_expire_time;
        break;
      }

      // required int32 expire_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }

      // optional int32 id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TempCardBinding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string card_serial = 1;
  if (has_card_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->card_serial(), output);
  }

  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

  // required int32 active_time = 3;
  if (has_active_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->active_time(), output);
  }

  // required int32 expire_time = 4;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->expire_time(), output);
  }

  // optional int32 id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->id(), output);
  }

}

int TempCardBinding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string card_serial = 1;
    if (has_card_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_serial());
    }

    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // required int32 active_time = 3;
    if (has_active_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_time());
    }

    // required int32 expire_time = 4;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expire_time());
    }

    // optional int32 id = 5;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TempCardBinding::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TempCardBinding*>(&from));
}

void TempCardBinding::MergeFrom(const TempCardBinding& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card_serial()) {
      set_card_serial(from.card_serial());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_active_time()) {
      set_active_time(from.active_time());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
}

void TempCardBinding::CopyFrom(const TempCardBinding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TempCardBinding::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TempCardBinding::Swap(TempCardBinding* other) {
  if (other != this) {
    std::swap(card_serial_, other->card_serial_);
    std::swap(user_id_, other->user_id_);
    std::swap(active_time_, other->active_time_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TempCardBinding::GetTypeName() const {
  return "biotech.osla.TempCardBinding";
}


// ===================================================================

#ifndef _MSC_VER
const int TempCardBindingList::kTempCardBindingFieldNumber;
#endif  // !_MSC_VER

TempCardBindingList::TempCardBindingList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TempCardBindingList::InitAsDefaultInstance() {
}

TempCardBindingList::TempCardBindingList(const TempCardBindingList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TempCardBindingList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TempCardBindingList::~TempCardBindingList() {
  SharedDtor();
}

void TempCardBindingList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TempCardBindingList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TempCardBindingList& TempCardBindingList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

TempCardBindingList* TempCardBindingList::default_instance_ = NULL;

TempCardBindingList* TempCardBindingList::New() const {
  return new TempCardBindingList;
}

void TempCardBindingList::Clear() {
  temp_card_binding_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TempCardBindingList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .biotech.osla.TempCardBinding temp_card_binding = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_temp_card_binding:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_temp_card_binding()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_temp_card_binding;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TempCardBindingList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .biotech.osla.TempCardBinding temp_card_binding = 1;
  for (int i = 0; i < this->temp_card_binding_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->temp_card_binding(i), output);
  }

}

int TempCardBindingList::ByteSize() const {
  int total_size = 0;

  // repeated .biotech.osla.TempCardBinding temp_card_binding = 1;
  total_size += 1 * this->temp_card_binding_size();
  for (int i = 0; i < this->temp_card_binding_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->temp_card_binding(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TempCardBindingList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TempCardBindingList*>(&from));
}

void TempCardBindingList::MergeFrom(const TempCardBindingList& from) {
  GOOGLE_CHECK_NE(&from, this);
  temp_card_binding_.MergeFrom(from.temp_card_binding_);
}

void TempCardBindingList::CopyFrom(const TempCardBindingList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TempCardBindingList::IsInitialized() const {

  for (int i = 0; i < temp_card_binding_size(); i++) {
    if (!this->temp_card_binding(i).IsInitialized()) return false;
  }
  return true;
}

void TempCardBindingList::Swap(TempCardBindingList* other) {
  if (other != this) {
    temp_card_binding_.Swap(&other->temp_card_binding_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TempCardBindingList::GetTypeName() const {
  return "biotech.osla.TempCardBindingList";
}


// ===================================================================

#ifndef _MSC_VER
const int Booking::kIdFieldNumber;
const int Booking::kUserIdFieldNumber;
const int Booking::kStartTimeFieldNumber;
const int Booking::kEndTimeFieldNumber;
const int Booking::kTypeFieldNumber;
const int Booking::kStatusFieldNumber;
const int Booking::kIsTipsFieldNumber;
const int Booking::kIsEndFieldNumber;
#endif  // !_MSC_VER

Booking::Booking()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Booking::InitAsDefaultInstance() {
}

Booking::Booking(const Booking& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Booking::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  user_id_ = 0;
  start_time_ = 0;
  end_time_ = 0;
  type_ = 0;
  status_ = 0;
  istips_ = false;
  isend_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Booking::~Booking() {
  SharedDtor();
}

void Booking::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Booking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Booking& Booking::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

Booking* Booking::default_instance_ = NULL;

Booking* Booking::New() const {
  return new Booking;
}

void Booking::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    user_id_ = 0;
    start_time_ = 0;
    end_time_ = 0;
    type_ = 0;
    status_ = 0;
    istips_ = false;
    isend_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Booking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_time;
        break;
      }

      // required int32 start_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_time;
        break;
      }

      // required int32 end_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // required int32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // required int32 status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isTips;
        break;
      }

      // optional bool isTips = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istips_)));
          set_has_istips();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isEnd;
        break;
      }

      // optional bool isEnd = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isend_)));
          set_has_isend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Booking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

  // required int32 start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->start_time(), output);
  }

  // required int32 end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->end_time(), output);
  }

  // required int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  // required int32 status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->status(), output);
  }

  // optional bool isTips = 7;
  if (has_istips()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->istips(), output);
  }

  // optional bool isEnd = 8;
  if (has_isend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isend(), output);
  }

}

int Booking::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // required int32 start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_time());
    }

    // required int32 end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_time());
    }

    // required int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional bool isTips = 7;
    if (has_istips()) {
      total_size += 1 + 1;
    }

    // optional bool isEnd = 8;
    if (has_isend()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Booking::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Booking*>(&from));
}

void Booking::MergeFrom(const Booking& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_istips()) {
      set_istips(from.istips());
    }
    if (from.has_isend()) {
      set_isend(from.isend());
    }
  }
}

void Booking::CopyFrom(const Booking& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Booking::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Booking::Swap(Booking* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(user_id_, other->user_id_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(type_, other->type_);
    std::swap(status_, other->status_);
    std::swap(istips_, other->istips_);
    std::swap(isend_, other->isend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Booking::GetTypeName() const {
  return "biotech.osla.Booking";
}


// ===================================================================

#ifndef _MSC_VER
const int BookingList::kBookingFieldNumber;
#endif  // !_MSC_VER

BookingList::BookingList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BookingList::InitAsDefaultInstance() {
}

BookingList::BookingList(const BookingList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BookingList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BookingList::~BookingList() {
  SharedDtor();
}

void BookingList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BookingList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BookingList& BookingList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

BookingList* BookingList::default_instance_ = NULL;

BookingList* BookingList::New() const {
  return new BookingList;
}

void BookingList::Clear() {
  booking_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BookingList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .biotech.osla.Booking booking = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_booking:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_booking()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_booking;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BookingList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .biotech.osla.Booking booking = 1;
  for (int i = 0; i < this->booking_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->booking(i), output);
  }

}

int BookingList::ByteSize() const {
  int total_size = 0;

  // repeated .biotech.osla.Booking booking = 1;
  total_size += 1 * this->booking_size();
  for (int i = 0; i < this->booking_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->booking(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BookingList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BookingList*>(&from));
}

void BookingList::MergeFrom(const BookingList& from) {
  GOOGLE_CHECK_NE(&from, this);
  booking_.MergeFrom(from.booking_);
}

void BookingList::CopyFrom(const BookingList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BookingList::IsInitialized() const {

  for (int i = 0; i < booking_size(); i++) {
    if (!this->booking(i).IsInitialized()) return false;
  }
  return true;
}

void BookingList::Swap(BookingList* other) {
  if (other != this) {
    booking_.Swap(&other->booking_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BookingList::GetTypeName() const {
  return "biotech.osla.BookingList";
}


// ===================================================================

#ifndef _MSC_VER
const int Calendar::kDayFieldNumber;
const int Calendar::kIsHolidayFieldNumber;
const int Calendar::kIdFieldNumber;
#endif  // !_MSC_VER

Calendar::Calendar()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Calendar::InitAsDefaultInstance() {
}

Calendar::Calendar(const Calendar& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Calendar::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0;
  is_holiday_ = false;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Calendar::~Calendar() {
  SharedDtor();
}

void Calendar::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Calendar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Calendar& Calendar::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

Calendar* Calendar::default_instance_ = NULL;

Calendar* Calendar::New() const {
  return new Calendar;
}

void Calendar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    day_ = 0;
    is_holiday_ = false;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Calendar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_holiday;
        break;
      }

      // required bool is_holiday = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_holiday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_holiday_)));
          set_has_is_holiday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Calendar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->day(), output);
  }

  // required bool is_holiday = 2;
  if (has_is_holiday()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_holiday(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

}

int Calendar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // required bool is_holiday = 2;
    if (has_is_holiday()) {
      total_size += 1 + 1;
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Calendar::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Calendar*>(&from));
}

void Calendar::MergeFrom(const Calendar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_is_holiday()) {
      set_is_holiday(from.is_holiday());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
}

void Calendar::CopyFrom(const Calendar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Calendar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Calendar::Swap(Calendar* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(is_holiday_, other->is_holiday_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Calendar::GetTypeName() const {
  return "biotech.osla.Calendar";
}


// ===================================================================

#ifndef _MSC_VER
const int CalendarList::kCalendarFieldNumber;
#endif  // !_MSC_VER

CalendarList::CalendarList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CalendarList::InitAsDefaultInstance() {
}

CalendarList::CalendarList(const CalendarList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CalendarList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalendarList::~CalendarList() {
  SharedDtor();
}

void CalendarList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CalendarList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CalendarList& CalendarList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

CalendarList* CalendarList::default_instance_ = NULL;

CalendarList* CalendarList::New() const {
  return new CalendarList;
}

void CalendarList::Clear() {
  calendar_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CalendarList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .biotech.osla.Calendar calendar = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_calendar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_calendar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_calendar;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CalendarList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .biotech.osla.Calendar calendar = 1;
  for (int i = 0; i < this->calendar_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->calendar(i), output);
  }

}

int CalendarList::ByteSize() const {
  int total_size = 0;

  // repeated .biotech.osla.Calendar calendar = 1;
  total_size += 1 * this->calendar_size();
  for (int i = 0; i < this->calendar_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->calendar(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalendarList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CalendarList*>(&from));
}

void CalendarList::MergeFrom(const CalendarList& from) {
  GOOGLE_CHECK_NE(&from, this);
  calendar_.MergeFrom(from.calendar_);
}

void CalendarList::CopyFrom(const CalendarList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalendarList::IsInitialized() const {

  for (int i = 0; i < calendar_size(); i++) {
    if (!this->calendar(i).IsInitialized()) return false;
  }
  return true;
}

void CalendarList::Swap(CalendarList* other) {
  if (other != this) {
    calendar_.Swap(&other->calendar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CalendarList::GetTypeName() const {
  return "biotech.osla.CalendarList";
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalConfig::kAccountDepositLimitFieldNumber;
const int GlobalConfig::kFtpHostFieldNumber;
const int GlobalConfig::kFtpPortFieldNumber;
const int GlobalConfig::kFtpUserNameFieldNumber;
const int GlobalConfig::kFtpPasswdFieldNumber;
const int GlobalConfig::kFtpRootUrlFieldNumber;
const int GlobalConfig::kServiceTimeFieldNumber;
const int GlobalConfig::kCaptureTimeFieldNumber;
const int GlobalConfig::kWorkingTimeFieldNumber;
const int GlobalConfig::kPaymentAccountEnableFieldNumber;
const int GlobalConfig::kValue1FieldNumber;
const int GlobalConfig::kValue2FieldNumber;
const int GlobalConfig::kValue3FieldNumber;
const int GlobalConfig::kValue4FieldNumber;
const int GlobalConfig::kValue5FieldNumber;
const int GlobalConfig::kValue6FieldNumber;
#endif  // !_MSC_VER

GlobalConfig::GlobalConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GlobalConfig::InitAsDefaultInstance() {
}

GlobalConfig::GlobalConfig(const GlobalConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalConfig::SharedCtor() {
  _cached_size_ = 0;
  account_deposit_limit_ = 0;
  ftp_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ftp_port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ftp_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ftp_passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ftp_root_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  servicetime_ = 0;
  capturetime_ = 0;
  working_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  payment_account_enable_ = false;
  value1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value6_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalConfig::~GlobalConfig() {
  SharedDtor();
}

void GlobalConfig::SharedDtor() {
  if (ftp_host_ != &::google::protobuf::internal::kEmptyString) {
    delete ftp_host_;
  }
  if (ftp_port_ != &::google::protobuf::internal::kEmptyString) {
    delete ftp_port_;
  }
  if (ftp_user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete ftp_user_name_;
  }
  if (ftp_passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete ftp_passwd_;
  }
  if (ftp_root_url_ != &::google::protobuf::internal::kEmptyString) {
    delete ftp_root_url_;
  }
  if (working_time_ != &::google::protobuf::internal::kEmptyString) {
    delete working_time_;
  }
  if (value1_ != &::google::protobuf::internal::kEmptyString) {
    delete value1_;
  }
  if (value2_ != &::google::protobuf::internal::kEmptyString) {
    delete value2_;
  }
  if (value3_ != &::google::protobuf::internal::kEmptyString) {
    delete value3_;
  }
  if (value4_ != &::google::protobuf::internal::kEmptyString) {
    delete value4_;
  }
  if (value5_ != &::google::protobuf::internal::kEmptyString) {
    delete value5_;
  }
  if (value6_ != &::google::protobuf::internal::kEmptyString) {
    delete value6_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GlobalConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GlobalConfig& GlobalConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

GlobalConfig* GlobalConfig::default_instance_ = NULL;

GlobalConfig* GlobalConfig::New() const {
  return new GlobalConfig;
}

void GlobalConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_deposit_limit_ = 0;
    if (has_ftp_host()) {
      if (ftp_host_ != &::google::protobuf::internal::kEmptyString) {
        ftp_host_->clear();
      }
    }
    if (has_ftp_port()) {
      if (ftp_port_ != &::google::protobuf::internal::kEmptyString) {
        ftp_port_->clear();
      }
    }
    if (has_ftp_user_name()) {
      if (ftp_user_name_ != &::google::protobuf::internal::kEmptyString) {
        ftp_user_name_->clear();
      }
    }
    if (has_ftp_passwd()) {
      if (ftp_passwd_ != &::google::protobuf::internal::kEmptyString) {
        ftp_passwd_->clear();
      }
    }
    if (has_ftp_root_url()) {
      if (ftp_root_url_ != &::google::protobuf::internal::kEmptyString) {
        ftp_root_url_->clear();
      }
    }
    servicetime_ = 0;
    capturetime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_working_time()) {
      if (working_time_ != &::google::protobuf::internal::kEmptyString) {
        working_time_->clear();
      }
    }
    payment_account_enable_ = false;
    if (has_value1()) {
      if (value1_ != &::google::protobuf::internal::kEmptyString) {
        value1_->clear();
      }
    }
    if (has_value2()) {
      if (value2_ != &::google::protobuf::internal::kEmptyString) {
        value2_->clear();
      }
    }
    if (has_value3()) {
      if (value3_ != &::google::protobuf::internal::kEmptyString) {
        value3_->clear();
      }
    }
    if (has_value4()) {
      if (value4_ != &::google::protobuf::internal::kEmptyString) {
        value4_->clear();
      }
    }
    if (has_value5()) {
      if (value5_ != &::google::protobuf::internal::kEmptyString) {
        value5_->clear();
      }
    }
    if (has_value6()) {
      if (value6_ != &::google::protobuf::internal::kEmptyString) {
        value6_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GlobalConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 account_deposit_limit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &account_deposit_limit_)));
          set_has_account_deposit_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ftp_host;
        break;
      }

      // optional string ftp_host = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ftp_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ftp_host()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ftp_port;
        break;
      }

      // optional string ftp_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ftp_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ftp_port()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ftp_user_name;
        break;
      }

      // optional string ftp_user_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ftp_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ftp_user_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ftp_passwd;
        break;
      }

      // optional string ftp_passwd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ftp_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ftp_passwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ftp_root_url;
        break;
      }

      // optional string ftp_root_url = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ftp_root_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ftp_root_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ServiceTime;
        break;
      }

      // optional int32 ServiceTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServiceTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servicetime_)));
          set_has_servicetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_CaptureTime;
        break;
      }

      // optional int32 CaptureTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CaptureTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &capturetime_)));
          set_has_capturetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_working_time;
        break;
      }

      // optional string working_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_working_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_working_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_payment_account_enable;
        break;
      }

      // optional bool payment_account_enable = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_payment_account_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &payment_account_enable_)));
          set_has_payment_account_enable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_value1;
        break;
      }

      // optional string value1 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_value2;
        break;
      }

      // optional string value2 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_value3;
        break;
      }

      // optional string value3 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_value4;
        break;
      }

      // optional string value4 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value4()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_value5;
        break;
      }

      // optional string value5 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value5()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_value6;
        break;
      }

      // optional string value6 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value6:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value6()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 account_deposit_limit = 1;
  if (has_account_deposit_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->account_deposit_limit(), output);
  }

  // optional string ftp_host = 2;
  if (has_ftp_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ftp_host(), output);
  }

  // optional string ftp_port = 3;
  if (has_ftp_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ftp_port(), output);
  }

  // optional string ftp_user_name = 4;
  if (has_ftp_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ftp_user_name(), output);
  }

  // optional string ftp_passwd = 5;
  if (has_ftp_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ftp_passwd(), output);
  }

  // optional string ftp_root_url = 6;
  if (has_ftp_root_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->ftp_root_url(), output);
  }

  // optional int32 ServiceTime = 7;
  if (has_servicetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->servicetime(), output);
  }

  // optional int32 CaptureTime = 8;
  if (has_capturetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->capturetime(), output);
  }

  // optional string working_time = 9;
  if (has_working_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->working_time(), output);
  }

  // optional bool payment_account_enable = 10;
  if (has_payment_account_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->payment_account_enable(), output);
  }

  // optional string value1 = 11;
  if (has_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->value1(), output);
  }

  // optional string value2 = 12;
  if (has_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->value2(), output);
  }

  // optional string value3 = 13;
  if (has_value3()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->value3(), output);
  }

  // optional string value4 = 14;
  if (has_value4()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->value4(), output);
  }

  // optional string value5 = 15;
  if (has_value5()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->value5(), output);
  }

  // optional string value6 = 16;
  if (has_value6()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->value6(), output);
  }

}

int GlobalConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 account_deposit_limit = 1;
    if (has_account_deposit_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->account_deposit_limit());
    }

    // optional string ftp_host = 2;
    if (has_ftp_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ftp_host());
    }

    // optional string ftp_port = 3;
    if (has_ftp_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ftp_port());
    }

    // optional string ftp_user_name = 4;
    if (has_ftp_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ftp_user_name());
    }

    // optional string ftp_passwd = 5;
    if (has_ftp_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ftp_passwd());
    }

    // optional string ftp_root_url = 6;
    if (has_ftp_root_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ftp_root_url());
    }

    // optional int32 ServiceTime = 7;
    if (has_servicetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servicetime());
    }

    // optional int32 CaptureTime = 8;
    if (has_capturetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->capturetime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string working_time = 9;
    if (has_working_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->working_time());
    }

    // optional bool payment_account_enable = 10;
    if (has_payment_account_enable()) {
      total_size += 1 + 1;
    }

    // optional string value1 = 11;
    if (has_value1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value1());
    }

    // optional string value2 = 12;
    if (has_value2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value2());
    }

    // optional string value3 = 13;
    if (has_value3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value3());
    }

    // optional string value4 = 14;
    if (has_value4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value4());
    }

    // optional string value5 = 15;
    if (has_value5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value5());
    }

    // optional string value6 = 16;
    if (has_value6()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value6());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GlobalConfig*>(&from));
}

void GlobalConfig::MergeFrom(const GlobalConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_deposit_limit()) {
      set_account_deposit_limit(from.account_deposit_limit());
    }
    if (from.has_ftp_host()) {
      set_ftp_host(from.ftp_host());
    }
    if (from.has_ftp_port()) {
      set_ftp_port(from.ftp_port());
    }
    if (from.has_ftp_user_name()) {
      set_ftp_user_name(from.ftp_user_name());
    }
    if (from.has_ftp_passwd()) {
      set_ftp_passwd(from.ftp_passwd());
    }
    if (from.has_ftp_root_url()) {
      set_ftp_root_url(from.ftp_root_url());
    }
    if (from.has_servicetime()) {
      set_servicetime(from.servicetime());
    }
    if (from.has_capturetime()) {
      set_capturetime(from.capturetime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_working_time()) {
      set_working_time(from.working_time());
    }
    if (from.has_payment_account_enable()) {
      set_payment_account_enable(from.payment_account_enable());
    }
    if (from.has_value1()) {
      set_value1(from.value1());
    }
    if (from.has_value2()) {
      set_value2(from.value2());
    }
    if (from.has_value3()) {
      set_value3(from.value3());
    }
    if (from.has_value4()) {
      set_value4(from.value4());
    }
    if (from.has_value5()) {
      set_value5(from.value5());
    }
    if (from.has_value6()) {
      set_value6(from.value6());
    }
  }
}

void GlobalConfig::CopyFrom(const GlobalConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GlobalConfig::Swap(GlobalConfig* other) {
  if (other != this) {
    std::swap(account_deposit_limit_, other->account_deposit_limit_);
    std::swap(ftp_host_, other->ftp_host_);
    std::swap(ftp_port_, other->ftp_port_);
    std::swap(ftp_user_name_, other->ftp_user_name_);
    std::swap(ftp_passwd_, other->ftp_passwd_);
    std::swap(ftp_root_url_, other->ftp_root_url_);
    std::swap(servicetime_, other->servicetime_);
    std::swap(capturetime_, other->capturetime_);
    std::swap(working_time_, other->working_time_);
    std::swap(payment_account_enable_, other->payment_account_enable_);
    std::swap(value1_, other->value1_);
    std::swap(value2_, other->value2_);
    std::swap(value3_, other->value3_);
    std::swap(value4_, other->value4_);
    std::swap(value5_, other->value5_);
    std::swap(value6_, other->value6_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GlobalConfig::GetTypeName() const {
  return "biotech.osla.GlobalConfig";
}


// ===================================================================

#ifndef _MSC_VER
const int Session::kIdFieldNumber;
const int Session::kStartTimeFieldNumber;
const int Session::kEndTimeFieldNumber;
const int Session::kTypeFieldNumber;
const int Session::kUserIdFieldNumber;
const int Session::kCardSerialFieldNumber;
const int Session::kUserRightFieldNumber;
const int Session::kAccountIdFieldNumber;
const int Session::kGroupIdFieldNumber;
const int Session::kBookingIdFieldNumber;
const int Session::kPenaltyFlagFieldNumber;
const int Session::kInstrumentIdFieldNumber;
const int Session::kLongTimeRightFieldNumber;
#endif  // !_MSC_VER

Session::Session()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Session::InitAsDefaultInstance() {
}

Session::Session(const Session& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Session::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  start_time_ = 0;
  end_time_ = 0;
  type_ = 0;
  user_id_ = 0;
  card_serial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_right_ = 0;
  account_id_ = 0;
  group_id_ = 0;
  booking_id_ = 0;
  penalty_flag_ = false;
  instrument_id_ = 0;
  long_time_right_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Session::~Session() {
  SharedDtor();
}

void Session::SharedDtor() {
  if (card_serial_ != &::google::protobuf::internal::kEmptyString) {
    delete card_serial_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Session::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Session& Session::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

Session* Session::default_instance_ = NULL;

Session* Session::New() const {
  return new Session;
}

void Session::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    start_time_ = 0;
    end_time_ = 0;
    type_ = 0;
    user_id_ = 0;
    if (has_card_serial()) {
      if (card_serial_ != &::google::protobuf::internal::kEmptyString) {
        card_serial_->clear();
      }
    }
    user_right_ = 0;
    account_id_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    group_id_ = 0;
    booking_id_ = 0;
    penalty_flag_ = false;
    instrument_id_ = 0;
    long_time_right_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Session::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_time;
        break;
      }

      // required int32 start_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end_time;
        break;
      }

      // required int32 end_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_user_id;
        break;
      }

      // required int32 user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_card_serial;
        break;
      }

      // required string card_serial = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_serial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_serial()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_user_right;
        break;
      }

      // required int32 user_right = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_right_)));
          set_has_user_right();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_account_id;
        break;
      }

      // required int32 account_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_group_id;
        break;
      }

      // required int32 group_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_booking_id;
        break;
      }

      // optional int32 booking_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_booking_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &booking_id_)));
          set_has_booking_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_penalty_flag;
        break;
      }

      // required bool penalty_flag = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_penalty_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &penalty_flag_)));
          set_has_penalty_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_instrument_id;
        break;
      }

      // required int32 instrument_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instrument_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instrument_id_)));
          set_has_instrument_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_long_time_right;
        break;
      }

      // optional int32 long_time_right = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_long_time_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &long_time_right_)));
          set_has_long_time_right();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Session::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required int32 start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start_time(), output);
  }

  // required int32 end_time = 3;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->end_time(), output);
  }

  // required int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // required int32 user_id = 5;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->user_id(), output);
  }

  // required string card_serial = 6;
  if (has_card_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->card_serial(), output);
  }

  // required int32 user_right = 7;
  if (has_user_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->user_right(), output);
  }

  // required int32 account_id = 8;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->account_id(), output);
  }

  // required int32 group_id = 9;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->group_id(), output);
  }

  // optional int32 booking_id = 10;
  if (has_booking_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->booking_id(), output);
  }

  // required bool penalty_flag = 11;
  if (has_penalty_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->penalty_flag(), output);
  }

  // required int32 instrument_id = 12;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->instrument_id(), output);
  }

  // optional int32 long_time_right = 13;
  if (has_long_time_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->long_time_right(), output);
  }

}

int Session::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required int32 start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_time());
    }

    // required int32 end_time = 3;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_time());
    }

    // required int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 user_id = 5;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // required string card_serial = 6;
    if (has_card_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_serial());
    }

    // required int32 user_right = 7;
    if (has_user_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_right());
    }

    // required int32 account_id = 8;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->account_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 group_id = 9;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_id());
    }

    // optional int32 booking_id = 10;
    if (has_booking_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->booking_id());
    }

    // required bool penalty_flag = 11;
    if (has_penalty_flag()) {
      total_size += 1 + 1;
    }

    // required int32 instrument_id = 12;
    if (has_instrument_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instrument_id());
    }

    // optional int32 long_time_right = 13;
    if (has_long_time_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->long_time_right());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Session::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Session*>(&from));
}

void Session::MergeFrom(const Session& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_card_serial()) {
      set_card_serial(from.card_serial());
    }
    if (from.has_user_right()) {
      set_user_right(from.user_right());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_booking_id()) {
      set_booking_id(from.booking_id());
    }
    if (from.has_penalty_flag()) {
      set_penalty_flag(from.penalty_flag());
    }
    if (from.has_instrument_id()) {
      set_instrument_id(from.instrument_id());
    }
    if (from.has_long_time_right()) {
      set_long_time_right(from.long_time_right());
    }
  }
}

void Session::CopyFrom(const Session& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Session::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000dff) != 0x00000dff) return false;

  return true;
}

void Session::Swap(Session* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(type_, other->type_);
    std::swap(user_id_, other->user_id_);
    std::swap(card_serial_, other->card_serial_);
    std::swap(user_right_, other->user_right_);
    std::swap(account_id_, other->account_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(booking_id_, other->booking_id_);
    std::swap(penalty_flag_, other->penalty_flag_);
    std::swap(instrument_id_, other->instrument_id_);
    std::swap(long_time_right_, other->long_time_right_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Session::GetTypeName() const {
  return "biotech.osla.Session";
}


// ===================================================================

#ifndef _MSC_VER
const int SessionList::kSessionFieldNumber;
#endif  // !_MSC_VER

SessionList::SessionList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SessionList::InitAsDefaultInstance() {
}

SessionList::SessionList(const SessionList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SessionList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionList::~SessionList() {
  SharedDtor();
}

void SessionList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SessionList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SessionList& SessionList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

SessionList* SessionList::default_instance_ = NULL;

SessionList* SessionList::New() const {
  return new SessionList;
}

void SessionList::Clear() {
  session_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SessionList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .biotech.osla.Session session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_session;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SessionList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .biotech.osla.Session session = 1;
  for (int i = 0; i < this->session_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->session(i), output);
  }

}

int SessionList::ByteSize() const {
  int total_size = 0;

  // repeated .biotech.osla.Session session = 1;
  total_size += 1 * this->session_size();
  for (int i = 0; i < this->session_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->session(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SessionList*>(&from));
}

void SessionList::MergeFrom(const SessionList& from) {
  GOOGLE_CHECK_NE(&from, this);
  session_.MergeFrom(from.session_);
}

void SessionList::CopyFrom(const SessionList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionList::IsInitialized() const {

  for (int i = 0; i < session_size(); i++) {
    if (!this->session(i).IsInitialized()) return false;
  }
  return true;
}

void SessionList::Swap(SessionList* other) {
  if (other != this) {
    session_.Swap(&other->session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SessionList::GetTypeName() const {
  return "biotech.osla.SessionList";
}


// ===================================================================

#ifndef _MSC_VER
const int UserInTraining::kSessionIdFieldNumber;
const int UserInTraining::kCardSerialFieldNumber;
const int UserInTraining::kUserIdFieldNumber;
const int UserInTraining::kCheckInTimeFieldNumber;
const int UserInTraining::kRowidFieldNumber;
#endif  // !_MSC_VER

UserInTraining::UserInTraining()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserInTraining::InitAsDefaultInstance() {
}

UserInTraining::UserInTraining(const UserInTraining& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserInTraining::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = GOOGLE_LONGLONG(0);
  card_serial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = 0;
  check_in_time_ = 0;
  rowid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInTraining::~UserInTraining() {
  SharedDtor();
}

void UserInTraining::SharedDtor() {
  if (card_serial_ != &::google::protobuf::internal::kEmptyString) {
    delete card_serial_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserInTraining::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserInTraining& UserInTraining::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

UserInTraining* UserInTraining::default_instance_ = NULL;

UserInTraining* UserInTraining::New() const {
  return new UserInTraining;
}

void UserInTraining::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = GOOGLE_LONGLONG(0);
    if (has_card_serial()) {
      if (card_serial_ != &::google::protobuf::internal::kEmptyString) {
        card_serial_->clear();
      }
    }
    user_id_ = 0;
    check_in_time_ = 0;
    rowid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserInTraining::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_card_serial;
        break;
      }

      // required string card_serial = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_serial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_serial()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // required int32 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_check_in_time;
        break;
      }

      // required int32 check_in_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_check_in_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &check_in_time_)));
          set_has_check_in_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rowid;
        break;
      }

      // optional int32 rowid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rowid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rowid_)));
          set_has_rowid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInTraining::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->session_id(), output);
  }

  // required string card_serial = 2;
  if (has_card_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->card_serial(), output);
  }

  // required int32 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_id(), output);
  }

  // required int32 check_in_time = 4;
  if (has_check_in_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->check_in_time(), output);
  }

  // optional int32 rowid = 5;
  if (has_rowid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rowid(), output);
  }

}

int UserInTraining::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->session_id());
    }

    // required string card_serial = 2;
    if (has_card_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_serial());
    }

    // required int32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // required int32 check_in_time = 4;
    if (has_check_in_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->check_in_time());
    }

    // optional int32 rowid = 5;
    if (has_rowid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rowid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInTraining::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserInTraining*>(&from));
}

void UserInTraining::MergeFrom(const UserInTraining& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_card_serial()) {
      set_card_serial(from.card_serial());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_check_in_time()) {
      set_check_in_time(from.check_in_time());
    }
    if (from.has_rowid()) {
      set_rowid(from.rowid());
    }
  }
}

void UserInTraining::CopyFrom(const UserInTraining& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInTraining::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void UserInTraining::Swap(UserInTraining* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(card_serial_, other->card_serial_);
    std::swap(user_id_, other->user_id_);
    std::swap(check_in_time_, other->check_in_time_);
    std::swap(rowid_, other->rowid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserInTraining::GetTypeName() const {
  return "biotech.osla.UserInTraining";
}


// ===================================================================

#ifndef _MSC_VER
const int UserInTrainingList::kUserInTrainingFieldNumber;
#endif  // !_MSC_VER

UserInTrainingList::UserInTrainingList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserInTrainingList::InitAsDefaultInstance() {
}

UserInTrainingList::UserInTrainingList(const UserInTrainingList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserInTrainingList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInTrainingList::~UserInTrainingList() {
  SharedDtor();
}

void UserInTrainingList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserInTrainingList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserInTrainingList& UserInTrainingList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

UserInTrainingList* UserInTrainingList::default_instance_ = NULL;

UserInTrainingList* UserInTrainingList::New() const {
  return new UserInTrainingList;
}

void UserInTrainingList::Clear() {
  user_in_training_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserInTrainingList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .biotech.osla.UserInTraining user_in_training = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_in_training:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_in_training()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_user_in_training;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInTrainingList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .biotech.osla.UserInTraining user_in_training = 1;
  for (int i = 0; i < this->user_in_training_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->user_in_training(i), output);
  }

}

int UserInTrainingList::ByteSize() const {
  int total_size = 0;

  // repeated .biotech.osla.UserInTraining user_in_training = 1;
  total_size += 1 * this->user_in_training_size();
  for (int i = 0; i < this->user_in_training_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_in_training(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInTrainingList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserInTrainingList*>(&from));
}

void UserInTrainingList::MergeFrom(const UserInTrainingList& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_in_training_.MergeFrom(from.user_in_training_);
}

void UserInTrainingList::CopyFrom(const UserInTrainingList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInTrainingList::IsInitialized() const {

  for (int i = 0; i < user_in_training_size(); i++) {
    if (!this->user_in_training(i).IsInitialized()) return false;
  }
  return true;
}

void UserInTrainingList::Swap(UserInTrainingList* other) {
  if (other != this) {
    user_in_training_.Swap(&other->user_in_training_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserInTrainingList::GetTypeName() const {
  return "biotech.osla.UserInTrainingList";
}


// ===================================================================

#ifndef _MSC_VER
const int UserEvent::kIdFieldNumber;
const int UserEvent::kUserIdFieldNumber;
const int UserEvent::kGroupIdFieldNumber;
const int UserEvent::kCardSerialFieldNumber;
const int UserEvent::kCardTypeFieldNumber;
const int UserEvent::kActionTypeFieldNumber;
const int UserEvent::kActionResultFieldNumber;
const int UserEvent::kCreateTimeFieldNumber;
const int UserEvent::kInstrumentIdFieldNumber;
#endif  // !_MSC_VER

UserEvent::UserEvent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserEvent::InitAsDefaultInstance() {
}

UserEvent::UserEvent(const UserEvent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserEvent::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  user_id_ = 0;
  group_id_ = 0;
  card_serial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  card_type_ = 0;
  action_type_ = 0;
  action_result_ = 0;
  create_time_ = 0;
  instrument_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserEvent::~UserEvent() {
  SharedDtor();
}

void UserEvent::SharedDtor() {
  if (card_serial_ != &::google::protobuf::internal::kEmptyString) {
    delete card_serial_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserEvent& UserEvent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

UserEvent* UserEvent::default_instance_ = NULL;

UserEvent* UserEvent::New() const {
  return new UserEvent;
}

void UserEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    user_id_ = 0;
    group_id_ = 0;
    if (has_card_serial()) {
      if (card_serial_ != &::google::protobuf::internal::kEmptyString) {
        card_serial_->clear();
      }
    }
    card_type_ = 0;
    action_type_ = 0;
    action_result_ = 0;
    create_time_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    instrument_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // optional int32 group_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_card_serial;
        break;
      }

      // required string card_serial = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_serial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_serial()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_card_type;
        break;
      }

      // required int32 card_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_type_)));
          set_has_card_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_action_type;
        break;
      }

      // required int32 action_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_type_)));
          set_has_action_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_action_result;
        break;
      }

      // required int32 action_result = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_result_)));
          set_has_action_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_create_time;
        break;
      }

      // required int32 create_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_instrument_id;
        break;
      }

      // required int32 instrument_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instrument_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instrument_id_)));
          set_has_instrument_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

  // optional int32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->group_id(), output);
  }

  // required string card_serial = 4;
  if (has_card_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->card_serial(), output);
  }

  // required int32 card_type = 5;
  if (has_card_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->card_type(), output);
  }

  // required int32 action_type = 6;
  if (has_action_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->action_type(), output);
  }

  // required int32 action_result = 7;
  if (has_action_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->action_result(), output);
  }

  // required int32 create_time = 8;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->create_time(), output);
  }

  // required int32 instrument_id = 9;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->instrument_id(), output);
  }

}

int UserEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // optional int32 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_id());
    }

    // required string card_serial = 4;
    if (has_card_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_serial());
    }

    // required int32 card_type = 5;
    if (has_card_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_type());
    }

    // required int32 action_type = 6;
    if (has_action_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_type());
    }

    // required int32 action_result = 7;
    if (has_action_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_result());
    }

    // required int32 create_time = 8;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 instrument_id = 9;
    if (has_instrument_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instrument_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserEvent*>(&from));
}

void UserEvent::MergeFrom(const UserEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_card_serial()) {
      set_card_serial(from.card_serial());
    }
    if (from.has_card_type()) {
      set_card_type(from.card_type());
    }
    if (from.has_action_type()) {
      set_action_type(from.action_type());
    }
    if (from.has_action_result()) {
      set_action_result(from.action_result());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_instrument_id()) {
      set_instrument_id(from.instrument_id());
    }
  }
}

void UserEvent::CopyFrom(const UserEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001fb) != 0x000001fb) return false;

  return true;
}

void UserEvent::Swap(UserEvent* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(card_serial_, other->card_serial_);
    std::swap(card_type_, other->card_type_);
    std::swap(action_type_, other->action_type_);
    std::swap(action_result_, other->action_result_);
    std::swap(create_time_, other->create_time_);
    std::swap(instrument_id_, other->instrument_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserEvent::GetTypeName() const {
  return "biotech.osla.UserEvent";
}


// ===================================================================

#ifndef _MSC_VER
const int UserEventList::kUserEventFieldNumber;
#endif  // !_MSC_VER

UserEventList::UserEventList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserEventList::InitAsDefaultInstance() {
}

UserEventList::UserEventList(const UserEventList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserEventList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserEventList::~UserEventList() {
  SharedDtor();
}

void UserEventList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserEventList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserEventList& UserEventList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

UserEventList* UserEventList::default_instance_ = NULL;

UserEventList* UserEventList::New() const {
  return new UserEventList;
}

void UserEventList::Clear() {
  user_event_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserEventList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .biotech.osla.UserEvent user_event = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_user_event;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserEventList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .biotech.osla.UserEvent user_event = 1;
  for (int i = 0; i < this->user_event_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->user_event(i), output);
  }

}

int UserEventList::ByteSize() const {
  int total_size = 0;

  // repeated .biotech.osla.UserEvent user_event = 1;
  total_size += 1 * this->user_event_size();
  for (int i = 0; i < this->user_event_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_event(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserEventList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserEventList*>(&from));
}

void UserEventList::MergeFrom(const UserEventList& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_event_.MergeFrom(from.user_event_);
}

void UserEventList::CopyFrom(const UserEventList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEventList::IsInitialized() const {

  for (int i = 0; i < user_event_size(); i++) {
    if (!this->user_event(i).IsInitialized()) return false;
  }
  return true;
}

void UserEventList::Swap(UserEventList* other) {
  if (other != this) {
    user_event_.Swap(&other->user_event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserEventList::GetTypeName() const {
  return "biotech.osla.UserEventList";
}


// ===================================================================

#ifndef _MSC_VER
const int SystemEvent::kIdFieldNumber;
const int SystemEvent::kEventTypeFieldNumber;
const int SystemEvent::kEventContentFieldNumber;
const int SystemEvent::kCreateTimeFieldNumber;
const int SystemEvent::kInstrumentIdFieldNumber;
#endif  // !_MSC_VER

SystemEvent::SystemEvent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SystemEvent::InitAsDefaultInstance() {
}

SystemEvent::SystemEvent(const SystemEvent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SystemEvent::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  event_type_ = 0;
  event_content_ = GOOGLE_LONGLONG(0);
  create_time_ = 0;
  instrument_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemEvent::~SystemEvent() {
  SharedDtor();
}

void SystemEvent::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SystemEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemEvent& SystemEvent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

SystemEvent* SystemEvent::default_instance_ = NULL;

SystemEvent* SystemEvent::New() const {
  return new SystemEvent;
}

void SystemEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    event_type_ = 0;
    event_content_ = GOOGLE_LONGLONG(0);
    create_time_ = 0;
    instrument_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SystemEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_type;
        break;
      }

      // required int32 event_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_event_content;
        break;
      }

      // optional int64 event_content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_content:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &event_content_)));
          set_has_event_content();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_create_time;
        break;
      }

      // required int32 create_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_instrument_id;
        break;
      }

      // required int32 instrument_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instrument_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instrument_id_)));
          set_has_instrument_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SystemEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required int32 event_type = 2;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->event_type(), output);
  }

  // optional int64 event_content = 3;
  if (has_event_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->event_content(), output);
  }

  // required int32 create_time = 4;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->create_time(), output);
  }

  // required int32 instrument_id = 5;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->instrument_id(), output);
  }

}

int SystemEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required int32 event_type = 2;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_type());
    }

    // optional int64 event_content = 3;
    if (has_event_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->event_content());
    }

    // required int32 create_time = 4;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_time());
    }

    // required int32 instrument_id = 5;
    if (has_instrument_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instrument_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemEvent*>(&from));
}

void SystemEvent::MergeFrom(const SystemEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_event_content()) {
      set_event_content(from.event_content());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_instrument_id()) {
      set_instrument_id(from.instrument_id());
    }
  }
}

void SystemEvent::CopyFrom(const SystemEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  return true;
}

void SystemEvent::Swap(SystemEvent* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(event_type_, other->event_type_);
    std::swap(event_content_, other->event_content_);
    std::swap(create_time_, other->create_time_);
    std::swap(instrument_id_, other->instrument_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SystemEvent::GetTypeName() const {
  return "biotech.osla.SystemEvent";
}


// ===================================================================

#ifndef _MSC_VER
const int SystemEventList::kSystemEventFieldNumber;
#endif  // !_MSC_VER

SystemEventList::SystemEventList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SystemEventList::InitAsDefaultInstance() {
}

SystemEventList::SystemEventList(const SystemEventList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SystemEventList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemEventList::~SystemEventList() {
  SharedDtor();
}

void SystemEventList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SystemEventList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemEventList& SystemEventList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

SystemEventList* SystemEventList::default_instance_ = NULL;

SystemEventList* SystemEventList::New() const {
  return new SystemEventList;
}

void SystemEventList::Clear() {
  system_event_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SystemEventList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .biotech.osla.SystemEvent system_event = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_system_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_system_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_system_event;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SystemEventList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .biotech.osla.SystemEvent system_event = 1;
  for (int i = 0; i < this->system_event_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->system_event(i), output);
  }

}

int SystemEventList::ByteSize() const {
  int total_size = 0;

  // repeated .biotech.osla.SystemEvent system_event = 1;
  total_size += 1 * this->system_event_size();
  for (int i = 0; i < this->system_event_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->system_event(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemEventList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemEventList*>(&from));
}

void SystemEventList::MergeFrom(const SystemEventList& from) {
  GOOGLE_CHECK_NE(&from, this);
  system_event_.MergeFrom(from.system_event_);
}

void SystemEventList::CopyFrom(const SystemEventList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemEventList::IsInitialized() const {

  for (int i = 0; i < system_event_size(); i++) {
    if (!this->system_event(i).IsInitialized()) return false;
  }
  return true;
}

void SystemEventList::Swap(SystemEventList* other) {
  if (other != this) {
    system_event_.Swap(&other->system_event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SystemEventList::GetTypeName() const {
  return "biotech.osla.SystemEventList";
}


// ===================================================================

#ifndef _MSC_VER
const int FtpFileUpload::kPathFieldNumber;
const int FtpFileUpload::kFileNameFieldNumber;
const int FtpFileUpload::kStatusFieldNumber;
const int FtpFileUpload::kConsumeTimeFieldNumber;
const int FtpFileUpload::kFileSizeFieldNumber;
const int FtpFileUpload::kCreateTimeFieldNumber;
const int FtpFileUpload::kPercentageFieldNumber;
const int FtpFileUpload::kLocalidFieldNumber;
#endif  // !_MSC_VER

FtpFileUpload::FtpFileUpload()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FtpFileUpload::InitAsDefaultInstance() {
}

FtpFileUpload::FtpFileUpload(const FtpFileUpload& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FtpFileUpload::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  consume_time_ = 0;
  file_size_ = GOOGLE_LONGLONG(0);
  create_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  percentage_ = 0;
  localid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FtpFileUpload::~FtpFileUpload() {
  SharedDtor();
}

void FtpFileUpload::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (create_time_ != &::google::protobuf::internal::kEmptyString) {
    delete create_time_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FtpFileUpload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FtpFileUpload& FtpFileUpload::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

FtpFileUpload* FtpFileUpload::default_instance_ = NULL;

FtpFileUpload* FtpFileUpload::New() const {
  return new FtpFileUpload;
}

void FtpFileUpload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
    status_ = 0;
    consume_time_ = 0;
    file_size_ = GOOGLE_LONGLONG(0);
    if (has_create_time()) {
      if (create_time_ != &::google::protobuf::internal::kEmptyString) {
        create_time_->clear();
      }
    }
    percentage_ = 0;
    localid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FtpFileUpload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }

      // required string file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .biotech.osla.FTP_FILE_UPLOAD_STATUS status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::biotech::osla::FTP_FILE_UPLOAD_STATUS_IsValid(value)) {
            set_status(static_cast< ::biotech::osla::FTP_FILE_UPLOAD_STATUS >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_consume_time;
        break;
      }

      // required int32 consume_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consume_time_)));
          set_has_consume_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_file_size;
        break;
      }

      // required int64 file_size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_create_time;
        break;
      }

      // required string create_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_create_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_create_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_percentage;
        break;
      }

      // optional int32 percentage = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percentage_)));
          set_has_percentage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_localid;
        break;
      }

      // optional int32 localid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_localid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &localid_)));
          set_has_localid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FtpFileUpload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  // required string file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->file_name(), output);
  }

  // required .biotech.osla.FTP_FILE_UPLOAD_STATUS status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // required int32 consume_time = 4;
  if (has_consume_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->consume_time(), output);
  }

  // required int64 file_size = 5;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->file_size(), output);
  }

  // required string create_time = 6;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->create_time(), output);
  }

  // optional int32 percentage = 7;
  if (has_percentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->percentage(), output);
  }

  // optional int32 localid = 8;
  if (has_localid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->localid(), output);
  }

}

int FtpFileUpload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // required string file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // required .biotech.osla.FTP_FILE_UPLOAD_STATUS status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required int32 consume_time = 4;
    if (has_consume_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consume_time());
    }

    // required int64 file_size = 5;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->file_size());
    }

    // required string create_time = 6;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->create_time());
    }

    // optional int32 percentage = 7;
    if (has_percentage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percentage());
    }

    // optional int32 localid = 8;
    if (has_localid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->localid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FtpFileUpload::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FtpFileUpload*>(&from));
}

void FtpFileUpload::MergeFrom(const FtpFileUpload& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_consume_time()) {
      set_consume_time(from.consume_time());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_percentage()) {
      set_percentage(from.percentage());
    }
    if (from.has_localid()) {
      set_localid(from.localid());
    }
  }
}

void FtpFileUpload::CopyFrom(const FtpFileUpload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtpFileUpload::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void FtpFileUpload::Swap(FtpFileUpload* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(file_name_, other->file_name_);
    std::swap(status_, other->status_);
    std::swap(consume_time_, other->consume_time_);
    std::swap(file_size_, other->file_size_);
    std::swap(create_time_, other->create_time_);
    std::swap(percentage_, other->percentage_);
    std::swap(localid_, other->localid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FtpFileUpload::GetTypeName() const {
  return "biotech.osla.FtpFileUpload";
}


// ===================================================================

#ifndef _MSC_VER
const int FtpEvent::kIdFieldNumber;
const int FtpEvent::kUserIdFieldNumber;
const int FtpEvent::kInstrumentIdFieldNumber;
const int FtpEvent::kGroupIdFieldNumber;
const int FtpEvent::kActivedAccountFieldNumber;
const int FtpEvent::kFileFieldNumber;
const int FtpEvent::kLocalIdFieldNumber;
#endif  // !_MSC_VER

FtpEvent::FtpEvent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FtpEvent::InitAsDefaultInstance() {
}

FtpEvent::FtpEvent(const FtpEvent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FtpEvent::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  user_id_ = 0;
  instrument_id_ = 0;
  group_id_ = 0;
  actived_account_ = 0;
  localid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FtpEvent::~FtpEvent() {
  SharedDtor();
}

void FtpEvent::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FtpEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FtpEvent& FtpEvent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

FtpEvent* FtpEvent::default_instance_ = NULL;

FtpEvent* FtpEvent::New() const {
  return new FtpEvent;
}

void FtpEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    user_id_ = 0;
    instrument_id_ = 0;
    group_id_ = 0;
    actived_account_ = 0;
    localid_ = 0;
  }
  file_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FtpEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_instrument_id;
        break;
      }

      // required int32 instrument_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instrument_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instrument_id_)));
          set_has_instrument_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_group_id;
        break;
      }

      // required int32 group_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_actived_account;
        break;
      }

      // required int32 actived_account = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actived_account:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actived_account_)));
          set_has_actived_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_file;
        break;
      }

      // repeated .biotech.osla.FtpFileUpload file = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_file;
        if (input->ExpectTag(56)) goto parse_localId;
        break;
      }

      // optional int32 localId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_localId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &localid_)));
          set_has_localid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FtpEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

  // required int32 instrument_id = 3;
  if (has_instrument_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->instrument_id(), output);
  }

  // required int32 group_id = 4;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->group_id(), output);
  }

  // required int32 actived_account = 5;
  if (has_actived_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->actived_account(), output);
  }

  // repeated .biotech.osla.FtpFileUpload file = 6;
  for (int i = 0; i < this->file_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->file(i), output);
  }

  // optional int32 localId = 7;
  if (has_localid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->localid(), output);
  }

}

int FtpEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // required int32 instrument_id = 3;
    if (has_instrument_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instrument_id());
    }

    // required int32 group_id = 4;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_id());
    }

    // required int32 actived_account = 5;
    if (has_actived_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actived_account());
    }

    // optional int32 localId = 7;
    if (has_localid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->localid());
    }

  }
  // repeated .biotech.osla.FtpFileUpload file = 6;
  total_size += 1 * this->file_size();
  for (int i = 0; i < this->file_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->file(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FtpEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FtpEvent*>(&from));
}

void FtpEvent::MergeFrom(const FtpEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  file_.MergeFrom(from.file_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_instrument_id()) {
      set_instrument_id(from.instrument_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_actived_account()) {
      set_actived_account(from.actived_account());
    }
    if (from.has_localid()) {
      set_localid(from.localid());
    }
  }
}

void FtpEvent::CopyFrom(const FtpEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtpEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  for (int i = 0; i < file_size(); i++) {
    if (!this->file(i).IsInitialized()) return false;
  }
  return true;
}

void FtpEvent::Swap(FtpEvent* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(user_id_, other->user_id_);
    std::swap(instrument_id_, other->instrument_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(actived_account_, other->actived_account_);
    file_.Swap(&other->file_);
    std::swap(localid_, other->localid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FtpEvent::GetTypeName() const {
  return "biotech.osla.FtpEvent";
}


// ===================================================================

#ifndef _MSC_VER
const int FtpEventList::kFtpEventFieldNumber;
#endif  // !_MSC_VER

FtpEventList::FtpEventList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FtpEventList::InitAsDefaultInstance() {
}

FtpEventList::FtpEventList(const FtpEventList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FtpEventList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FtpEventList::~FtpEventList() {
  SharedDtor();
}

void FtpEventList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FtpEventList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FtpEventList& FtpEventList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

FtpEventList* FtpEventList::default_instance_ = NULL;

FtpEventList* FtpEventList::New() const {
  return new FtpEventList;
}

void FtpEventList::Clear() {
  ftp_event_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FtpEventList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .biotech.osla.FtpEvent ftp_event = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ftp_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ftp_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ftp_event;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FtpEventList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .biotech.osla.FtpEvent ftp_event = 1;
  for (int i = 0; i < this->ftp_event_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->ftp_event(i), output);
  }

}

int FtpEventList::ByteSize() const {
  int total_size = 0;

  // repeated .biotech.osla.FtpEvent ftp_event = 1;
  total_size += 1 * this->ftp_event_size();
  for (int i = 0; i < this->ftp_event_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ftp_event(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FtpEventList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FtpEventList*>(&from));
}

void FtpEventList::MergeFrom(const FtpEventList& from) {
  GOOGLE_CHECK_NE(&from, this);
  ftp_event_.MergeFrom(from.ftp_event_);
}

void FtpEventList::CopyFrom(const FtpEventList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtpEventList::IsInitialized() const {

  for (int i = 0; i < ftp_event_size(); i++) {
    if (!this->ftp_event(i).IsInitialized()) return false;
  }
  return true;
}

void FtpEventList::Swap(FtpEventList* other) {
  if (other != this) {
    ftp_event_.Swap(&other->ftp_event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FtpEventList::GetTypeName() const {
  return "biotech.osla.FtpEventList";
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceCaptureEvent::kIdFieldNumber;
const int DeviceCaptureEvent::kInstrumentIdFieldNumber;
const int DeviceCaptureEvent::kDeviceNameFieldNumber;
const int DeviceCaptureEvent::kDeviceValueFieldNumber;
const int DeviceCaptureEvent::kCaptureTimeFieldNumber;
#endif  // !_MSC_VER

DeviceCaptureEvent::DeviceCaptureEvent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DeviceCaptureEvent::InitAsDefaultInstance() {
}

DeviceCaptureEvent::DeviceCaptureEvent(const DeviceCaptureEvent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceCaptureEvent::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  instrumentid_ = 0;
  devicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  capturetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceCaptureEvent::~DeviceCaptureEvent() {
  SharedDtor();
}

void DeviceCaptureEvent::SharedDtor() {
  if (devicename_ != &::google::protobuf::internal::kEmptyString) {
    delete devicename_;
  }
  if (devicevalue_ != &::google::protobuf::internal::kEmptyString) {
    delete devicevalue_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeviceCaptureEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceCaptureEvent& DeviceCaptureEvent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

DeviceCaptureEvent* DeviceCaptureEvent::default_instance_ = NULL;

DeviceCaptureEvent* DeviceCaptureEvent::New() const {
  return new DeviceCaptureEvent;
}

void DeviceCaptureEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    instrumentid_ = 0;
    if (has_devicename()) {
      if (devicename_ != &::google::protobuf::internal::kEmptyString) {
        devicename_->clear();
      }
    }
    if (has_devicevalue()) {
      if (devicevalue_ != &::google::protobuf::internal::kEmptyString) {
        devicevalue_->clear();
      }
    }
    capturetime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DeviceCaptureEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instrumentId;
        break;
      }

      // required int32 instrumentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instrumentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instrumentid_)));
          set_has_instrumentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_deviceName;
        break;
      }

      // required string deviceName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_deviceValue;
        break;
      }

      // required string deviceValue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicevalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_captureTime;
        break;
      }

      // required int32 captureTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_captureTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &capturetime_)));
          set_has_capturetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceCaptureEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required int32 instrumentId = 2;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instrumentid(), output);
  }

  // required string deviceName = 3;
  if (has_devicename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->devicename(), output);
  }

  // required string deviceValue = 4;
  if (has_devicevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->devicevalue(), output);
  }

  // required int32 captureTime = 5;
  if (has_capturetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->capturetime(), output);
  }

}

int DeviceCaptureEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required int32 instrumentId = 2;
    if (has_instrumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instrumentid());
    }

    // required string deviceName = 3;
    if (has_devicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicename());
    }

    // required string deviceValue = 4;
    if (has_devicevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicevalue());
    }

    // required int32 captureTime = 5;
    if (has_capturetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->capturetime());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceCaptureEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceCaptureEvent*>(&from));
}

void DeviceCaptureEvent::MergeFrom(const DeviceCaptureEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_instrumentid()) {
      set_instrumentid(from.instrumentid());
    }
    if (from.has_devicename()) {
      set_devicename(from.devicename());
    }
    if (from.has_devicevalue()) {
      set_devicevalue(from.devicevalue());
    }
    if (from.has_capturetime()) {
      set_capturetime(from.capturetime());
    }
  }
}

void DeviceCaptureEvent::CopyFrom(const DeviceCaptureEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceCaptureEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void DeviceCaptureEvent::Swap(DeviceCaptureEvent* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(instrumentid_, other->instrumentid_);
    std::swap(devicename_, other->devicename_);
    std::swap(devicevalue_, other->devicevalue_);
    std::swap(capturetime_, other->capturetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeviceCaptureEvent::GetTypeName() const {
  return "biotech.osla.DeviceCaptureEvent";
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceCaptureEventList::kDeviceCaptureEventFieldNumber;
#endif  // !_MSC_VER

DeviceCaptureEventList::DeviceCaptureEventList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DeviceCaptureEventList::InitAsDefaultInstance() {
}

DeviceCaptureEventList::DeviceCaptureEventList(const DeviceCaptureEventList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceCaptureEventList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceCaptureEventList::~DeviceCaptureEventList() {
  SharedDtor();
}

void DeviceCaptureEventList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeviceCaptureEventList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceCaptureEventList& DeviceCaptureEventList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

DeviceCaptureEventList* DeviceCaptureEventList::default_instance_ = NULL;

DeviceCaptureEventList* DeviceCaptureEventList::New() const {
  return new DeviceCaptureEventList;
}

void DeviceCaptureEventList::Clear() {
  device_capture_event_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DeviceCaptureEventList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .biotech.osla.DeviceCaptureEvent device_capture_event = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_capture_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_device_capture_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_device_capture_event;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceCaptureEventList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .biotech.osla.DeviceCaptureEvent device_capture_event = 1;
  for (int i = 0; i < this->device_capture_event_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->device_capture_event(i), output);
  }

}

int DeviceCaptureEventList::ByteSize() const {
  int total_size = 0;

  // repeated .biotech.osla.DeviceCaptureEvent device_capture_event = 1;
  total_size += 1 * this->device_capture_event_size();
  for (int i = 0; i < this->device_capture_event_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->device_capture_event(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceCaptureEventList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceCaptureEventList*>(&from));
}

void DeviceCaptureEventList::MergeFrom(const DeviceCaptureEventList& from) {
  GOOGLE_CHECK_NE(&from, this);
  device_capture_event_.MergeFrom(from.device_capture_event_);
}

void DeviceCaptureEventList::CopyFrom(const DeviceCaptureEventList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceCaptureEventList::IsInitialized() const {

  for (int i = 0; i < device_capture_event_size(); i++) {
    if (!this->device_capture_event(i).IsInitialized()) return false;
  }
  return true;
}

void DeviceCaptureEventList::Swap(DeviceCaptureEventList* other) {
  if (other != this) {
    device_capture_event_.Swap(&other->device_capture_event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeviceCaptureEventList::GetTypeName() const {
  return "biotech.osla.DeviceCaptureEventList";
}


// ===================================================================

#ifndef _MSC_VER
const int SessionOpertaionReq::kIdFieldNumber;
const int SessionOpertaionReq::kUserIdFieldNumber;
const int SessionOpertaionReq::kCardSerialFieldNumber;
const int SessionOpertaionReq::kUserRoleFieldNumber;
const int SessionOpertaionReq::kOperationTypeFieldNumber;
#endif  // !_MSC_VER

SessionOpertaionReq::SessionOpertaionReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SessionOpertaionReq::InitAsDefaultInstance() {
}

SessionOpertaionReq::SessionOpertaionReq(const SessionOpertaionReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SessionOpertaionReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  user_id_ = 0;
  card_serial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_role_ = 0;
  operation_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionOpertaionReq::~SessionOpertaionReq() {
  SharedDtor();
}

void SessionOpertaionReq::SharedDtor() {
  if (card_serial_ != &::google::protobuf::internal::kEmptyString) {
    delete card_serial_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SessionOpertaionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SessionOpertaionReq& SessionOpertaionReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

SessionOpertaionReq* SessionOpertaionReq::default_instance_ = NULL;

SessionOpertaionReq* SessionOpertaionReq::New() const {
  return new SessionOpertaionReq;
}

void SessionOpertaionReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    user_id_ = 0;
    if (has_card_serial()) {
      if (card_serial_ != &::google::protobuf::internal::kEmptyString) {
        card_serial_->clear();
      }
    }
    user_role_ = 0;
    operation_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SessionOpertaionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_card_serial;
        break;
      }

      // required string card_serial = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_serial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_serial()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_user_role;
        break;
      }

      // required int32 user_role = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_role_)));
          set_has_user_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_operation_type;
        break;
      }

      // required int32 operation_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operation_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operation_type_)));
          set_has_operation_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SessionOpertaionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

  // required string card_serial = 3;
  if (has_card_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->card_serial(), output);
  }

  // required int32 user_role = 4;
  if (has_user_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->user_role(), output);
  }

  // required int32 operation_type = 5;
  if (has_operation_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->operation_type(), output);
  }

}

int SessionOpertaionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // required string card_serial = 3;
    if (has_card_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_serial());
    }

    // required int32 user_role = 4;
    if (has_user_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_role());
    }

    // required int32 operation_type = 5;
    if (has_operation_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operation_type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionOpertaionReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SessionOpertaionReq*>(&from));
}

void SessionOpertaionReq::MergeFrom(const SessionOpertaionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_card_serial()) {
      set_card_serial(from.card_serial());
    }
    if (from.has_user_role()) {
      set_user_role(from.user_role());
    }
    if (from.has_operation_type()) {
      set_operation_type(from.operation_type());
    }
  }
}

void SessionOpertaionReq::CopyFrom(const SessionOpertaionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionOpertaionReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SessionOpertaionReq::Swap(SessionOpertaionReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(user_id_, other->user_id_);
    std::swap(card_serial_, other->card_serial_);
    std::swap(user_role_, other->user_role_);
    std::swap(operation_type_, other->operation_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SessionOpertaionReq::GetTypeName() const {
  return "biotech.osla.SessionOpertaionReq";
}


// ===================================================================

#ifndef _MSC_VER
const int SessionOpertaionRep::kIdFieldNumber;
const int SessionOpertaionRep::kStatusFieldNumber;
const int SessionOpertaionRep::kBookingIdFieldNumber;
#endif  // !_MSC_VER

SessionOpertaionRep::SessionOpertaionRep()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SessionOpertaionRep::InitAsDefaultInstance() {
}

SessionOpertaionRep::SessionOpertaionRep(const SessionOpertaionRep& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SessionOpertaionRep::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  status_ = 0;
  bookingid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionOpertaionRep::~SessionOpertaionRep() {
  SharedDtor();
}

void SessionOpertaionRep::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SessionOpertaionRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SessionOpertaionRep& SessionOpertaionRep::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

SessionOpertaionRep* SessionOpertaionRep::default_instance_ = NULL;

SessionOpertaionRep* SessionOpertaionRep::New() const {
  return new SessionOpertaionRep;
}

void SessionOpertaionRep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    status_ = 0;
    bookingid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SessionOpertaionRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_BookingId;
        break;
      }

      // required int32 BookingId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BookingId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bookingid_)));
          set_has_bookingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SessionOpertaionRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // required int32 BookingId = 3;
  if (has_bookingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bookingid(), output);
  }

}

int SessionOpertaionRep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required int32 BookingId = 3;
    if (has_bookingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bookingid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionOpertaionRep::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SessionOpertaionRep*>(&from));
}

void SessionOpertaionRep::MergeFrom(const SessionOpertaionRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_bookingid()) {
      set_bookingid(from.bookingid());
    }
  }
}

void SessionOpertaionRep::CopyFrom(const SessionOpertaionRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionOpertaionRep::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SessionOpertaionRep::Swap(SessionOpertaionRep* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(bookingid_, other->bookingid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SessionOpertaionRep::GetTypeName() const {
  return "biotech.osla.SessionOpertaionRep";
}


// ===================================================================

#ifndef _MSC_VER
const int Entrust::kIdFieldNumber;
const int Entrust::kUserIdFieldNumber;
const int Entrust::kTitleFieldNumber;
const int Entrust::kStatusFieldNumber;
const int Entrust::kIsDoingFieldNumber;
#endif  // !_MSC_VER

Entrust::Entrust()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Entrust::InitAsDefaultInstance() {
}

Entrust::Entrust(const Entrust& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Entrust::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  user_id_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  is_doing_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Entrust::~Entrust() {
  SharedDtor();
}

void Entrust::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Entrust::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Entrust& Entrust::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

Entrust* Entrust::default_instance_ = NULL;

Entrust* Entrust::New() const {
  return new Entrust;
}

void Entrust::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    user_id_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    status_ = 0;
    is_doing_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Entrust::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // required string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required int32 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_doing;
        break;
      }

      // required int32 is_doing = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_doing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_doing_)));
          set_has_is_doing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Entrust::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

  // required string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }

  // required int32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  // required int32 is_doing = 5;
  if (has_is_doing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->is_doing(), output);
  }

}

int Entrust::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // required string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required int32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required int32 is_doing = 5;
    if (has_is_doing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_doing());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entrust::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Entrust*>(&from));
}

void Entrust::MergeFrom(const Entrust& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_is_doing()) {
      set_is_doing(from.is_doing());
    }
  }
}

void Entrust::CopyFrom(const Entrust& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entrust::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Entrust::Swap(Entrust* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(user_id_, other->user_id_);
    std::swap(title_, other->title_);
    std::swap(status_, other->status_);
    std::swap(is_doing_, other->is_doing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Entrust::GetTypeName() const {
  return "biotech.osla.Entrust";
}


// ===================================================================

#ifndef _MSC_VER
const int EntrustList::kEntrustFieldNumber;
#endif  // !_MSC_VER

EntrustList::EntrustList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EntrustList::InitAsDefaultInstance() {
}

EntrustList::EntrustList(const EntrustList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EntrustList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntrustList::~EntrustList() {
  SharedDtor();
}

void EntrustList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EntrustList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EntrustList& EntrustList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

EntrustList* EntrustList::default_instance_ = NULL;

EntrustList* EntrustList::New() const {
  return new EntrustList;
}

void EntrustList::Clear() {
  entrust_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EntrustList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .biotech.osla.Entrust entrust = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrust:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entrust()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entrust;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EntrustList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .biotech.osla.Entrust entrust = 1;
  for (int i = 0; i < this->entrust_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->entrust(i), output);
  }

}

int EntrustList::ByteSize() const {
  int total_size = 0;

  // repeated .biotech.osla.Entrust entrust = 1;
  total_size += 1 * this->entrust_size();
  for (int i = 0; i < this->entrust_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entrust(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntrustList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EntrustList*>(&from));
}

void EntrustList::MergeFrom(const EntrustList& from) {
  GOOGLE_CHECK_NE(&from, this);
  entrust_.MergeFrom(from.entrust_);
}

void EntrustList::CopyFrom(const EntrustList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntrustList::IsInitialized() const {

  for (int i = 0; i < entrust_size(); i++) {
    if (!this->entrust(i).IsInitialized()) return false;
  }
  return true;
}

void EntrustList::Swap(EntrustList* other) {
  if (other != this) {
    entrust_.Swap(&other->entrust_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EntrustList::GetTypeName() const {
  return "biotech.osla.EntrustList";
}


// ===================================================================

#ifndef _MSC_VER
const int EntrustEvent::kIdFieldNumber;
const int EntrustEvent::kEntrustIdFieldNumber;
const int EntrustEvent::kStatusFieldNumber;
const int EntrustEvent::kIsDoingFieldNumber;
const int EntrustEvent::kSessionIdFieldNumber;
const int EntrustEvent::kSessionInfoFieldNumber;
#endif  // !_MSC_VER

EntrustEvent::EntrustEvent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EntrustEvent::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sessioninfo_ = const_cast< ::biotech::osla::Session*>(
      ::biotech::osla::Session::internal_default_instance());
#else
  sessioninfo_ = const_cast< ::biotech::osla::Session*>(&::biotech::osla::Session::default_instance());
#endif
}

EntrustEvent::EntrustEvent(const EntrustEvent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EntrustEvent::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  entrust_id_ = 0;
  status_ = 0;
  is_doing_ = 0;
  session_id_ = GOOGLE_LONGLONG(0);
  sessioninfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntrustEvent::~EntrustEvent() {
  SharedDtor();
}

void EntrustEvent::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete sessioninfo_;
  }
}

void EntrustEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EntrustEvent& EntrustEvent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

EntrustEvent* EntrustEvent::default_instance_ = NULL;

EntrustEvent* EntrustEvent::New() const {
  return new EntrustEvent;
}

void EntrustEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    entrust_id_ = 0;
    status_ = 0;
    is_doing_ = 0;
    session_id_ = GOOGLE_LONGLONG(0);
    if (has_sessioninfo()) {
      if (sessioninfo_ != NULL) sessioninfo_->::biotech::osla::Session::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EntrustEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_entrust_id;
        break;
      }

      // required int32 entrust_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entrust_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entrust_id_)));
          set_has_entrust_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_doing;
        break;
      }

      // optional int32 is_doing = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_doing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_doing_)));
          set_has_is_doing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_session_id;
        break;
      }

      // required int64 session_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sessionInfo;
        break;
      }

      // optional .biotech.osla.Session sessionInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sessionInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sessioninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EntrustEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required int32 entrust_id = 2;
  if (has_entrust_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->entrust_id(), output);
  }

  // required int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  // optional int32 is_doing = 4;
  if (has_is_doing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_doing(), output);
  }

  // required int64 session_id = 5;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->session_id(), output);
  }

  // optional .biotech.osla.Session sessionInfo = 6;
  if (has_sessioninfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->sessioninfo(), output);
  }

}

int EntrustEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required int32 entrust_id = 2;
    if (has_entrust_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entrust_id());
    }

    // required int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 is_doing = 4;
    if (has_is_doing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_doing());
    }

    // required int64 session_id = 5;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->session_id());
    }

    // optional .biotech.osla.Session sessionInfo = 6;
    if (has_sessioninfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sessioninfo());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntrustEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EntrustEvent*>(&from));
}

void EntrustEvent::MergeFrom(const EntrustEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_entrust_id()) {
      set_entrust_id(from.entrust_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_is_doing()) {
      set_is_doing(from.is_doing());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_sessioninfo()) {
      mutable_sessioninfo()->::biotech::osla::Session::MergeFrom(from.sessioninfo());
    }
  }
}

void EntrustEvent::CopyFrom(const EntrustEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntrustEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  if (has_sessioninfo()) {
    if (!this->sessioninfo().IsInitialized()) return false;
  }
  return true;
}

void EntrustEvent::Swap(EntrustEvent* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(entrust_id_, other->entrust_id_);
    std::swap(status_, other->status_);
    std::swap(is_doing_, other->is_doing_);
    std::swap(session_id_, other->session_id_);
    std::swap(sessioninfo_, other->sessioninfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EntrustEvent::GetTypeName() const {
  return "biotech.osla.EntrustEvent";
}


// ===================================================================

#ifndef _MSC_VER
const int EntrustEventList::kEntrustEventFieldNumber;
#endif  // !_MSC_VER

EntrustEventList::EntrustEventList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EntrustEventList::InitAsDefaultInstance() {
}

EntrustEventList::EntrustEventList(const EntrustEventList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EntrustEventList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntrustEventList::~EntrustEventList() {
  SharedDtor();
}

void EntrustEventList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EntrustEventList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EntrustEventList& EntrustEventList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

EntrustEventList* EntrustEventList::default_instance_ = NULL;

EntrustEventList* EntrustEventList::New() const {
  return new EntrustEventList;
}

void EntrustEventList::Clear() {
  entrust_event_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EntrustEventList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .biotech.osla.EntrustEvent entrust_event = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrust_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entrust_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entrust_event;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EntrustEventList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .biotech.osla.EntrustEvent entrust_event = 1;
  for (int i = 0; i < this->entrust_event_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->entrust_event(i), output);
  }

}

int EntrustEventList::ByteSize() const {
  int total_size = 0;

  // repeated .biotech.osla.EntrustEvent entrust_event = 1;
  total_size += 1 * this->entrust_event_size();
  for (int i = 0; i < this->entrust_event_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entrust_event(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntrustEventList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EntrustEventList*>(&from));
}

void EntrustEventList::MergeFrom(const EntrustEventList& from) {
  GOOGLE_CHECK_NE(&from, this);
  entrust_event_.MergeFrom(from.entrust_event_);
}

void EntrustEventList::CopyFrom(const EntrustEventList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntrustEventList::IsInitialized() const {

  for (int i = 0; i < entrust_event_size(); i++) {
    if (!this->entrust_event(i).IsInitialized()) return false;
  }
  return true;
}

void EntrustEventList::Swap(EntrustEventList* other) {
  if (other != this) {
    entrust_event_.Swap(&other->entrust_event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EntrustEventList::GetTypeName() const {
  return "biotech.osla.EntrustEventList";
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeParams::kEnableFieldNumber;
const int UpgradeParams::kForceUpgradeFieldNumber;
const int UpgradeParams::kNewVerFieldNumber;
const int UpgradeParams::kFromVerFieldNumber;
const int UpgradeParams::kSizeFieldNumber;
const int UpgradeParams::kAdler32FieldNumber;
const int UpgradeParams::kUrlFieldNumber;
const int UpgradeParams::kReversed1FieldNumber;
const int UpgradeParams::kReversed2FieldNumber;
#endif  // !_MSC_VER

UpgradeParams::UpgradeParams()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UpgradeParams::InitAsDefaultInstance() {
}

UpgradeParams::UpgradeParams(const UpgradeParams& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeParams::SharedCtor() {
  _cached_size_ = 0;
  enable_ = false;
  force_upgrade_ = false;
  new_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = 0;
  adler32_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reversed1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reversed2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeParams::~UpgradeParams() {
  SharedDtor();
}

void UpgradeParams::SharedDtor() {
  if (new_ver_ != &::google::protobuf::internal::kEmptyString) {
    delete new_ver_;
  }
  if (from_ver_ != &::google::protobuf::internal::kEmptyString) {
    delete from_ver_;
  }
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (reversed1_ != &::google::protobuf::internal::kEmptyString) {
    delete reversed1_;
  }
  if (reversed2_ != &::google::protobuf::internal::kEmptyString) {
    delete reversed2_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UpgradeParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpgradeParams& UpgradeParams::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

UpgradeParams* UpgradeParams::default_instance_ = NULL;

UpgradeParams* UpgradeParams::New() const {
  return new UpgradeParams;
}

void UpgradeParams::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enable_ = false;
    force_upgrade_ = false;
    if (has_new_ver()) {
      if (new_ver_ != &::google::protobuf::internal::kEmptyString) {
        new_ver_->clear();
      }
    }
    if (has_from_ver()) {
      if (from_ver_ != &::google::protobuf::internal::kEmptyString) {
        from_ver_->clear();
      }
    }
    size_ = 0;
    adler32_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    if (has_reversed1()) {
      if (reversed1_ != &::google::protobuf::internal::kEmptyString) {
        reversed1_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_reversed2()) {
      if (reversed2_ != &::google::protobuf::internal::kEmptyString) {
        reversed2_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UpgradeParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool enable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
          set_has_enable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_force_upgrade;
        break;
      }

      // required bool force_upgrade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force_upgrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_upgrade_)));
          set_has_force_upgrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_ver;
        break;
      }

      // required string new_ver = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_ver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_from_ver;
        break;
      }

      // required string from_ver = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_ver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_size;
        break;
      }

      // required int32 size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_adler32;
        break;
      }

      // required int32 adler32 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adler32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adler32_)));
          set_has_adler32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_url;
        break;
      }

      // required string url = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_reversed1;
        break;
      }

      // optional string reversed1 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reversed1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reversed1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_reversed2;
        break;
      }

      // optional string reversed2 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reversed2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reversed2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpgradeParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool enable = 1;
  if (has_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // required bool force_upgrade = 2;
  if (has_force_upgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->force_upgrade(), output);
  }

  // required string new_ver = 3;
  if (has_new_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->new_ver(), output);
  }

  // required string from_ver = 4;
  if (has_from_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->from_ver(), output);
  }

  // required int32 size = 5;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->size(), output);
  }

  // required int32 adler32 = 6;
  if (has_adler32()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->adler32(), output);
  }

  // required string url = 7;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->url(), output);
  }

  // optional string reversed1 = 8;
  if (has_reversed1()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->reversed1(), output);
  }

  // optional string reversed2 = 9;
  if (has_reversed2()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->reversed2(), output);
  }

}

int UpgradeParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool enable = 1;
    if (has_enable()) {
      total_size += 1 + 1;
    }

    // required bool force_upgrade = 2;
    if (has_force_upgrade()) {
      total_size += 1 + 1;
    }

    // required string new_ver = 3;
    if (has_new_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_ver());
    }

    // required string from_ver = 4;
    if (has_from_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_ver());
    }

    // required int32 size = 5;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // required int32 adler32 = 6;
    if (has_adler32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adler32());
    }

    // required string url = 7;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string reversed1 = 8;
    if (has_reversed1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reversed1());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string reversed2 = 9;
    if (has_reversed2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reversed2());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeParams::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpgradeParams*>(&from));
}

void UpgradeParams::MergeFrom(const UpgradeParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enable()) {
      set_enable(from.enable());
    }
    if (from.has_force_upgrade()) {
      set_force_upgrade(from.force_upgrade());
    }
    if (from.has_new_ver()) {
      set_new_ver(from.new_ver());
    }
    if (from.has_from_ver()) {
      set_from_ver(from.from_ver());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_adler32()) {
      set_adler32(from.adler32());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_reversed1()) {
      set_reversed1(from.reversed1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reversed2()) {
      set_reversed2(from.reversed2());
    }
  }
}

void UpgradeParams::CopyFrom(const UpgradeParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void UpgradeParams::Swap(UpgradeParams* other) {
  if (other != this) {
    std::swap(enable_, other->enable_);
    std::swap(force_upgrade_, other->force_upgrade_);
    std::swap(new_ver_, other->new_ver_);
    std::swap(from_ver_, other->from_ver_);
    std::swap(size_, other->size_);
    std::swap(adler32_, other->adler32_);
    std::swap(url_, other->url_);
    std::swap(reversed1_, other->reversed1_);
    std::swap(reversed2_, other->reversed2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpgradeParams::GetTypeName() const {
  return "biotech.osla.UpgradeParams";
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradePlan::kTypeFieldNumber;
const int UpgradePlan::kStartDateFieldNumber;
const int UpgradePlan::kIntervalFieldNumber;
const int UpgradePlan::kReversed1FieldNumber;
#endif  // !_MSC_VER

UpgradePlan::UpgradePlan()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UpgradePlan::InitAsDefaultInstance() {
}

UpgradePlan::UpgradePlan(const UpgradePlan& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradePlan::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  start_date_ = GOOGLE_LONGLONG(0);
  interval_ = 0;
  reversed1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradePlan::~UpgradePlan() {
  SharedDtor();
}

void UpgradePlan::SharedDtor() {
  if (reversed1_ != &::google::protobuf::internal::kEmptyString) {
    delete reversed1_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UpgradePlan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpgradePlan& UpgradePlan::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
#endif
  return *default_instance_;
}

UpgradePlan* UpgradePlan::default_instance_ = NULL;

UpgradePlan* UpgradePlan::New() const {
  return new UpgradePlan;
}

void UpgradePlan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    start_date_ = GOOGLE_LONGLONG(0);
    interval_ = 0;
    if (has_reversed1()) {
      if (reversed1_ != &::google::protobuf::internal::kEmptyString) {
        reversed1_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UpgradePlan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_date;
        break;
      }

      // required int64 start_date = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_date_)));
          set_has_start_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_interval;
        break;
      }

      // required int32 interval = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reversed1;
        break;
      }

      // optional string reversed1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reversed1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reversed1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpgradePlan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int64 start_date = 2;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start_date(), output);
  }

  // required int32 interval = 3;
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->interval(), output);
  }

  // optional string reversed1 = 4;
  if (has_reversed1()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->reversed1(), output);
  }

}

int UpgradePlan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int64 start_date = 2;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_date());
    }

    // required int32 interval = 3;
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interval());
    }

    // optional string reversed1 = 4;
    if (has_reversed1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reversed1());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradePlan::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpgradePlan*>(&from));
}

void UpgradePlan::MergeFrom(const UpgradePlan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_interval()) {
      set_interval(from.interval());
    }
    if (from.has_reversed1()) {
      set_reversed1(from.reversed1());
    }
  }
}

void UpgradePlan::CopyFrom(const UpgradePlan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradePlan::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UpgradePlan::Swap(UpgradePlan* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(start_date_, other->start_date_);
    std::swap(interval_, other->interval_);
    std::swap(reversed1_, other->reversed1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpgradePlan::GetTypeName() const {
  return "biotech.osla.UpgradePlan";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace osla
}  // namespace biotech

// @@protoc_insertion_point(global_scope)
